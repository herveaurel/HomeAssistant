
##############################
#Arlo sensor
##############################
  - platform: aarlo
    monitored_conditions:
    - last_capture
    - total_cameras
    - battery_level
    - captured_today
    - signal_strength
  
##############################
#Sensor Random 
##############################
  - platform: random
    name: Aléatoire
    minimum: 1  
    maximum: 4


  - platform: rest
    scan_interval: '00:30:00'
    name: vacances_scolaires
    json_attributes_path: "$.records[0].fields"
    json_attributes:
      - start_date
      - end_date
      - description
    resource_template: |-
        {% set location = 'Nantes' %}
        {% set rows = '1'%}
        {% set aujourdhui = now().strftime('%Y-%m-%d')%}
        {% set dayOfYear =  now().strftime('%j') %}
        {% set year =  now().strftime('%Y') | int %}
        {% set lastYear = year - 1 %}
        {% set nextYear = year + 1 %}
        {% if dayOfYear > '244' %}
        {% set schoolYear = (year | string) + "-" + (nextYear | string) %}
        {%- else -%}
        {% set schoolYear = (lastYear | string) + "-" + (year | string) %}
        {%- endif %}
        https://data.education.gouv.fr/api/records/1.0/search/?dataset=fr-en-calendrier-scolaire&facet=start_date&facet=end_date&rows={{rows}}&refine.location={{location}}&sort=-end_date&q=end_date%3E={{aujourdhui}}
    value_template: |-
        {% set aujourdhui = now().strftime('%Y-%m-%d')%}
        {% for record in value_json.records -%}
        {% if aujourdhui >= record.fields.start_date and aujourdhui <= record.fields.end_date %} 
        {%- if record.fields.description %}{{record.fields.description}} jusqu'au {{ as_timestamp(record.fields.end_date) | timestamp_custom('%d-%m-%Y') }} {% endif %}
        {% else %} 
        {%- if record.fields.end_date > aujourdhui and record.fields.description %} prochaines : {{record.fields.description}} {{ as_timestamp(record.fields.start_date) | timestamp_custom('%d-%m-%Y') }}{% endif %}
        {% endif %}
        {%- endfor %} 
        
##############################
#historiques 
##############################

    #RADIATEUR
    
  - platform: history_stats
    name: Radiateur durée aujourd' hui 
    entity_id: switch.radiateur
    state: "on"
    type: time
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"
    
    #LAVE-LINGE
    
  - platform: history_stats
    name: Lave-linge durée aujourd' hui 
    entity_id: input_select.lave_linge
    state: "on"
    type: time
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"

    
    #BRUITS DE L EAU SALLE DE BAIN
    
  - platform: history_stats
    name: Bruits de l'eau durée aujourd' hui 
    entity_id: input_boolean.bruits_deau_sdb
    state: "on"
    type: time
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"

  - platform: history_stats
    name: Bruits de l'eau durée hier 
    entity_id: input_boolean.bruits_deau_sdb
    state: "on"
    type: time
    start: "{{ (now().replace(hour=0, minute=0, second=0) - timedelta(days=1)).isoformat() }}"
    end: "{{ now().replace(hour=0, minute=0, second=0).isoformat() }}"
    
  - platform: history_stats
    name: Bruits de l'eau durée 7 jours 
    entity_id: input_boolean.bruits_deau_sdb
    state: "on"
    type: time
    start: "{{ (now() - timedelta(days=7)).isoformat() }}"
    end: "{{ now().isoformat() }}"

    #LUMIERES ALLUMEES
    
  - platform: history_stats
    name: Lumières allumées durée aujourd'hui 
    entity_id: light.tout
    state: "on"
    type: time
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"

  - platform: history_stats
    name: Lumières allumées durée hier 
    entity_id: light.tout
    state: "on"
    type: time
    start: "{{ (now().replace(hour=0, minute=0, second=0) - timedelta(days=1)).isoformat() }}"
    end: "{{ now().replace(hour=0, minute=0, second=0).isoformat() }}"    
 
  - platform: history_stats
    name: Lumières allumées durée 7 jours 
    entity_id: light.tout
    state: "on"
    type: time
    start: "{{ (now() - timedelta(days=7)).isoformat() }}"
    end: "{{ now().isoformat() }}"  
    
##############################
#Sensor Templates 
##############################
      
  - platform: template
    sensors:

          
###### PRONOTE
      pronote_hs:
        friendly_name: comptes Pronote indisponibles          
        value_template: >-
          {%- set entities = expand('group.pronote') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
          {{ entities | join(', ') }}
          
          
      next_day_manon:
            value_template: "{{state_attr('sensor.pronote_xxx_manon_timetable_next_day','lessons')[0].start_at.strftime('%Y-%m-%d')}}"
            unique_id: sensor.next_day_manon
            friendly_name: "Prochain Jour de cours Manon"
            
      devoirs_manon:
            unique_id: sensor.devoirs_manon_next_day
            friendly_name: "Devoirs Manon" 
            value_template: "{% set devoirs = namespace(total = 0,fait=0,restant=0) %}
                              {% for state in range(states('sensor.pronote_xxx_manon_homework') | int)  %}
                                {% set homework = state_attr('sensor.pronote_xxx_manon_homework','homework')[state] %}
                                {% if homework.date | string == states('sensor.next_day_manon') %}
                                {% if homework.done  == true  %}
                                  {% set devoirs.fait = devoirs.fait + 1 %}
                                  {%- endif  %}
                                {% set devoirs.total = devoirs.total + 1 %}
                                {%- endif  %}
                              {%- endfor %}
                              {% set devoirs.restant = devoirs.total -  devoirs.fait  %}
                              {{ devoirs.restant  | int != 0 }}"
            attribute_templates:
              devoirs_totaux:  "{% set devoirs = namespace(total = 0) %}
                              {% for state in range(states('sensor.pronote_xxx_manon_homework') | int)  %}
                                {% set homework = state_attr('sensor.pronote_xxx_manon_homework','homework')[state] %}
                                {% if homework.date | string == states('sensor.next_day_manon') %}
                                {% set devoirs.total = devoirs.total + 1 %}
                                {%- endif  %}
                              {%- endfor %}
                              {{devoirs.total}}"
              devoirs_faits:  "{% set devoirs = namespace(fait = 0) %}
                              {% for state in range(states('sensor.pronote_xxx_manon_homework') | int)  %}
                                {% set homework = state_attr('sensor.pronote_xxx_manon_homework','homework')[state] %}
                                {% if homework.date | string == states('sensor.next_day_manon') %}
                                  {% if homework.done  == true  %}
                                    {% set devoirs.fait = devoirs.fait + 1 %}
                                  {%- endif  %}
                                {%- endif  %}
                              {%- endfor %}
                              {{ devoirs.fait}}"
              devoirs_restants:  "{{state_attr('sensor.devoirs_manon','devoirs_totaux') |int - state_attr('sensor.devoirs_manon','devoirs_faits') |int}}"
              pour_le: "{{state_attr('sensor.pronote_xxx_manon_timetable_next_day','lessons')[0].start_at.strftime('%Y-%m-%d') }}" 
              
      devoirs_manon_next_day:
        friendly_name: Devoirs manon pour le prochain jour         
        value_template: >-
            {% set items = states.sensor.devoirs_manon %} 
            {% set devoirs_restants = items.attributes.devoirs_restants %}
            {% set date = as_timestamp(states.sensor.devoirs_manon.attributes.pour_le)  | timestamp_custom("%A %d/%m",true) 
                    | replace('Monday', 'lundi')
                    | replace('Tuesday', 'mardi')
                    | replace('Wednesday', 'mercredi')
                    | replace('Thursday', 'jeudi')
                    | replace('Friday', 'vendredi')
                    | replace('Saturday', 'samedi')
                    | replace('Sunday', 'dimanche') %}    
            {% if devoirs_restants == 0 %}
              Tout est fait pour le {{ date }}
            {% elif devoirs_restants == 1 %}
              {{ devoirs_restants }} devoir non fait pour le {{ date }}
            {% elif devoirs_restants > 1 %}
              {{ devoirs_restants }} devoirs non faits pour le {{ date }}
            {% else %}
              {{ devoirs_restants }} devoirs non faits pour le {{ date }}
            {% endif %}        
        
      next_day_leane:
            value_template: "{{state_attr('sensor.pronote_xxx_l_ane_timetable_next_day','lessons')[0].start_at.strftime('%Y-%m-%d')}}"
            unique_id: sensor.next_day_leane
            friendly_name: "Prochain Jour de cours Léane"
            
      devoirs_leane:
            unique_id: sensor.devoirs_leane_next_day
            friendly_name: "Devoirs Léane" 
            value_template: "{% set devoirs = namespace(total = 0,fait=0,restant=0) %}
                              {% for state in range(states('sensor.pronote_xxx_l_ane_homework') | int)  %}
                                {% set homework = state_attr('sensor.pronote_xxx_l_ane_homework','homework')[state] %}
                                {% if homework.date | string == states('sensor.next_day_leane') %}
                                {% if homework.done  == true  %}
                                  {% set devoirs.fait = devoirs.fait + 1 %}
                                  {%- endif  %}
                                {% set devoirs.total = devoirs.total + 1 %}
                                {%- endif  %}
                              {%- endfor %}
                              {% set devoirs.restant = devoirs.total -  devoirs.fait  %}
                              {{ devoirs.restant  | int != 0 }}"
            attribute_templates:
              devoirs_totaux:  "{% set devoirs = namespace(total = 0) %}
                              {% for state in range(states('sensor.pronote_xxx_l_ane_homework') | int)  %}
                                {% set homework = state_attr('sensor.pronote_xxx_l_ane_homework','homework')[state] %}
                                {% if homework.date | string == states('sensor.next_day_leane') %}
                                {% set devoirs.total = devoirs.total + 1 %}
                                {%- endif  %}
                              {%- endfor %}
                              {{devoirs.total}}"
              devoirs_faits:  "{% set devoirs = namespace(fait = 0) %}
                              {% for state in range(states('sensor.pronote_xxx_l_ane_homework') | int)  %}
                                {% set homework = state_attr('sensor.pronote_xxx_l_ane_homework','homework')[state] %}
                                {% if homework.date | string == states('sensor.next_day_leane') %}
                                  {% if homework.done  == true  %}
                                    {% set devoirs.fait = devoirs.fait + 1 %}
                                  {%- endif  %}
                                {%- endif  %}
                              {%- endfor %}
                              {{ devoirs.fait}}"
              devoirs_restants:  "{{state_attr('sensor.devoirs_leane','devoirs_totaux') |int - state_attr('sensor.devoirs_leane','devoirs_faits') |int}}"
              pour_le: "{{state_attr('sensor.pronote_xxx_l_ane_timetable_next_day','lessons')[0].start_at.strftime('%Y-%m-%d') }}"                              

      devoirs_leane_next_day:
        friendly_name: Devoirs leane pour le prochain jour         
        value_template: >-
            {% set items = states.sensor.devoirs_leane %} 
            {% set devoirs_restants = items.attributes.devoirs_restants %}
            {% set date = as_timestamp(states.sensor.devoirs_leane.attributes.pour_le)  | timestamp_custom("%A %d/%m",true) 
                    | replace('Monday', 'lundi')
                    | replace('Tuesday', 'mardi')
                    | replace('Wednesday', 'mercredi')
                    | replace('Thursday', 'jeudi')
                    | replace('Friday', 'vendredi')
                    | replace('Saturday', 'samedi')
                    | replace('Sunday', 'dimanche') %}    
            {% if devoirs_restants == 0 %}
              Tout est fait pour le {{ date }}
            {% elif devoirs_restants == 1 %}
              {{ devoirs_restants }} devoir non fait pour le {{ date }}
            {% elif devoirs_restants > 1 %}
              {{ devoirs_restants }} devoirs non faits pour le {{ date }}
            {% else %}
              {{ devoirs_restants }} devoirs non faits pour le {{ date }}
            {% endif %} 
            
            
###### TENDANCE

      temp_sejour_tendance_icon:
        friendly_name: icon pour temp sejour tendance          
        value_template: >-
          {% if state_attr('binary_sensor.trend_temp_sejour', 'gradient')|float(0) > 0 %}
            ↑
          {% elif state_attr('binary_sensor.trend_temp_sejour', 'gradient')|float(0)  < 0 %}
            ↓
          {% else %}
            →
          {% endif %}

      temp_couloir_tendance_icon:
        friendly_name: icon pour temp couloir tendance          
        value_template: >-
          {% if state_attr('binary_sensor.trend_temp_couloir', 'gradient')|float(0) > 0 %}
            ↑
          {% elif state_attr('binary_sensor.trend_temp_couloir', 'gradient')|float(0)  < 0 %}
            ↓
          {% else %}
            →
          {% endif %}

      temp_cuisine_tendance_icon:
        friendly_name: icon pour temp cuisine tendance          
        value_template: >-
          {% if state_attr('binary_sensor.trend_temp_cuisine', 'gradient')|float(0) > 0 %}
            ↑
          {% elif state_attr('binary_sensor.trend_temp_cuisine', 'gradient')|float(0)  < 0 %}
            ↓
          {% else %}
            →
          {% endif %}

      temp_parents_tendance_icon:
        friendly_name: icon pour temp parents tendance          
        value_template: >-
          {% if state_attr('binary_sensor.trend_temp_parents', 'gradient')|float(0) > 0 %}
            ↑
          {% elif state_attr('binary_sensor.trend_temp_parents', 'gradient')|float(0)  < 0 %}
            ↓
          {% else %}
            →
          {% endif %}

      temp_garage_tendance_icon:
        friendly_name: icon pour temp garage tendance          
        value_template: >-
          {% if state_attr('binary_sensor.trend_temp_garage', 'gradient')|float(0) > 0 %}
            ↑
          {% elif state_attr('binary_sensor.trend_temp_garage', 'gradient')|float(0)  < 0 %}
            ↓
          {% else %}
            →
          {% endif %}

      temp_air_tendance_icon:
        friendly_name: icon pour temp air tendance          
        value_template: >-
          {% if state_attr('binary_sensor.trend_temp_air', 'gradient')|float(0) > 0 %}
            ↑
          {% elif state_attr('binary_sensor.trend_temp_air', 'gradient')|float(0)  < 0 %}
            ↓
          {% else %}
            →
          {% endif %}

      temp_tom_tendance_icon:
        friendly_name: icon pour temp tom tendance          
        value_template: >-
          {% if state_attr('binary_sensor.trend_temp_tom', 'gradient')|float(0) > 0 %}
            ↑
          {% elif state_attr('binary_sensor.trend_temp_tom', 'gradient')|float(0)  < 0 %}
            ↓
          {% else %}
            →
          {% endif %}

      temp_manon_tendance_icon:
        friendly_name: icon pour temp manon tendance          
        value_template: >-
          {% if state_attr('binary_sensor.trend_temp_manon', 'gradient')|float(0) > 0 %}
            ↑
          {% elif state_attr('binary_sensor.trend_temp_manon', 'gradient')|float(0)  < 0 %}
            ↓
          {% else %}
            →
          {% endif %}

      temp_nina_tendance_icon:
        friendly_name: icon pour temp nina tendance          
        value_template: >-
          {% if state_attr('binary_sensor.trend_temp_nina', 'gradient')|float(0) > 0 %}
            ↑
          {% elif state_attr('binary_sensor.trend_temp_nina', 'gradient')|float(0)  < 0 %}
            ↓
          {% else %}
            →
          {% endif %}

      temp_sdb_tendance_icon:
        friendly_name: icon pour temp sdb tendance          
        value_template: >-
          {% if state_attr('binary_sensor.trend_temp_sdb', 'gradient')|float(0) > 0 %}
            ↑
          {% elif state_attr('binary_sensor.trend_temp_sdb', 'gradient')|float(0)  < 0 %}
            ↓
          {% else %}
            →
          {% endif %}
          
      air_tendance_icon:
        friendly_name: icon pour air tendance          
        value_template: >-
          {% if state_attr('binary_sensor.trend_air', 'gradient')|float(0) > 0 %}
            ↑
          {% elif state_attr('binary_sensor.trend_air', 'gradient')|float(0)  < 0 %}
            ↓
          {% else %}
            →
          {% endif %}
          
      cpu_tendance_icon:
        friendly_name: icon pour cpu tendance          
        value_template: >-
          {% if state_attr('binary_sensor.trend_cpu_temp', 'gradient')|float(0) > 0 %}
            ↑
          {% elif state_attr('binary_sensor.trend_cpu_temp', 'gradient')|float(0)  < 0 %}
            ↓
          {% else %}
            →
          {% endif %} 

      processor_tendance_icon:
        friendly_name: icon pour processor tendance          
        value_template: >-
          {% if state_attr('binary_sensor.trend_processor', 'gradient')|float(0) > 0 %}
            ↑
          {% elif state_attr('binary_sensor.trend_processor', 'gradient')|float(0)  < 0 %}
            ↓
          {% else %}
            →
          {% endif %} 

      memory_tendance_icon:
        friendly_name: icon pour memory tendance          
        value_template: >-
          {% if state_attr('binary_sensor.trend_memory', 'gradient')|float(0) > 0 %}
            ↑
          {% elif state_attr('binary_sensor.trend_memory', 'gradient')|float(0)  < 0 %}
            ↓
          {% else %}
            →
          {% endif %} 
          
      ssd_tendance_icon:
        friendly_name: icon pour ssd tendance          
        value_template: >-
          {% if state_attr('binary_sensor.trend_disk_use', 'gradient')|float(0) > 0 %}
            ↑
          {% elif state_attr('binary_sensor.trend_disk_use', 'gradient')|float(0)  < 0 %}
            ↓
          {% else %}
            →
          {% endif %}  

###### Historique 

      duree_radiateur_allume:
        friendly_name: Durée en min radiateur allumé aujourd'hui          
        value_template: >-
            {% set heures_str = states.sensor.radiateur_duree_aujourd_hui.state %}
            {% set heures = heures_str | float %}
            {%- set minutes = (heures * 60)  -%}            
            {{ minutes | int}}
        unit_of_measurement: 'min'
            
      duree_lumieres_allumees:
        friendly_name: Durée des lumières allumées aujourd'hui          
        value_template: >-
            {% set heures_str = states.sensor.lumieres_allumees_duree_aujourd_hui.state %}
            {% set heures = heures_str | float %}
            
            {%- set heures_int = heures | int -%}
            {%- set minutes = (heures * 60) - (heures_int * 60) -%}
            {%- set secondes = (heures * 3600) % 60 -%}
            
            {% if heures_int >= 1 %}{{ heures_int | int }}h {% endif %}{% if minutes >= 1 %}{{ minutes | int }}min {% endif %}{{ secondes | int }}sec

      duree_lumieres_allumees_hier:
        friendly_name: Durée des lumières allumées hier          
        value_template: >-
            {% set heures_str = states.sensor.lumieres_allumees_duree_hier.state %}
            {% set heures = heures_str | float %}
            
            {%- set heures_int = heures | int -%}
            {%- set minutes = (heures * 60) - (heures_int * 60) -%}
            {%- set secondes = (heures * 3600) % 60 -%}
            
            {% if heures_int >= 1 %}{{ heures_int | int }}h {% endif %}{% if minutes >= 1 %}{{ minutes | int }}min {% endif %}{{ secondes | int }}sec
      
      duree_lumieres_allumees_7_jours:
        friendly_name: Durée des lumières allumées 7 derniers jours          
        value_template: >-
            {% set heures_str = states.sensor.lumieres_allumees_duree_7_jours.state %}
            {% set heures = heures_str | float %}
            
            {%- set jours_int = (heures // 24) | int -%}
            {%- set heures_int = heures | int %}
            {%- set minutes = (heures * 60) - (heures_int * 60) -%}
            
            {% if jours_int >= 1 %}{{ jours_int | int }}j{% if jours_int > 1 %}{% endif %} {% endif %}{% if heures_int >= 1 %}{{ heures_int % 24 }}h {% endif %}{% if minutes >= 1 %}{{ minutes | int }}min{% endif %}

                  
      duree_bruits_de_l_eau:
        friendly_name: Durée de Bruits de l'eau aujourd'hui          
        value_template: >-
            {% set heures_str = states.sensor.bruits_de_l_eau_duree_aujourd_hui.state %}
            {% set heures = heures_str | float %}
            
            {%- set heures_int = heures | int -%}
            {%- set minutes = (heures * 60) - (heures_int * 60) -%}
            {%- set secondes = (heures * 3600) % 60 -%}
            
            {% if heures_int >= 1 %}{{ heures_int | int }}h {% endif %}{% if minutes >= 1 %}{{ minutes | int }}min {% endif %}{{ secondes | int }}sec

      duree_bruits_de_l_eau_hier:
        friendly_name: Durée de Bruits de l'eaus hier          
        value_template: >-
            {% set heures_str = states.sensor.bruits_de_l_eau_duree_hier.state %}
            {% set heures = heures_str | float %}
            
            {%- set heures_int = heures | int -%}
            {%- set minutes = (heures * 60) - (heures_int * 60) -%}
            {%- set secondes = (heures * 3600) % 60 -%}
            
            {% if heures_int >= 1 %}{{ heures_int | int }}h {% endif %}{% if minutes >= 1 %}{{ minutes | int }}min {% endif %}{{ secondes | int }}sec
      
      duree_bruits_de_l_eau_7_jours:
        friendly_name: Durée de Bruits de l'eau 7 derniers jours          
        value_template: >-
            {% set heures_str = states.sensor.bruits_de_l_eau_duree_7_jours.state %}
            {% set heures = heures_str | float %}
            
            {%- set jours_int = (heures // 24) | int -%}
            {%- set heures_int = heures | int %}
            {%- set minutes = (heures * 60) - (heures_int * 60) -%}
            
            {% if jours_int >= 1 %}{{ jours_int | int }}j{% if jours_int > 1 %}{% endif %} {% endif %}{% if heures_int >= 1 %}{{ heures_int % 24 }}h {% endif %}{% if minutes >= 1 %}{{ minutes | int }}min{% endif %}

###### DIVERS              
      night_state:
        friendly_name: Night State
        value_template: "{% if is_state('sun.sun', 'below_horizon') %}1{% else %}0{% endif %}"
          
#      dans_2_heures:
#        friendly_name: exemple, dans 2 heures          
#        value_template: >-
#          {{(as_timestamp(states.input_boolean.lave_linge.last_changed) + (7200)) | timestamp_custom("%Hh%m",true)}}
          
#      demain:
#        friendly_name: jour de demain          
#        value_template: >-
#          {% set demain = (as_timestamp(now())+ (86400)) | timestamp_custom("%A",true)
#            | replace('Monday', 'Lundi')
#            | replace('Tuesday', 'Mardi')
#            | replace('Wednesday', 'Mercredi')
#            | replace('Thursday', 'Jeudi')
#            | replace('Friday', 'Vendredi')
#            | replace('Saturday', 'Samedi')
#            | replace('Sunday', 'Dimanche') %}
#          {{ demain }}

###### SPOOK
      spook:
        friendly_name: Spook problèmes trouvés
        value_template: >
          {% if states('sensor.active_issues')|float(0) > 0 %}
            {{ states.sensor.active_issues.state }} problème(s)
          {% else %}
            false
          {% endif %}
          
###### SOLEIL ET LUNE
      sun_elevation:
        friendly_name: Sun Elevation
        icon_template: mdi:weather-sunny
        unit_of_measurement: "°"
        value_template: >
          {{ state_attr('sun.sun', 'elevation') }}

        
###### MONITEUR QUALITE AIR
      qualite_air_pourcentage:
        friendly_name: "Qualité de l'air en %"
        value_template: "{{ (100) - ((states.sensor.moniteur_qualite_air.state|float(0)*100/5500)|float|round(2)|float(0))|float|round(1) }}" 
        unit_of_measurement: "%"
        
###### ECHOS ALEXA     
      last_alexa:
        friendly_name: "Dernier echo appelé"
        value_template: "{{ expand('group.echos') | selectattr('attributes.last_called','eq',True) | map(attribute='entity_id') | first | default('unknown')}}"       
       

###### HEURE ET DATE
      heure:
        friendly_name: "heure"
        value_template: >-
          {{ states('sensor.time') | replace(':', 'h') }} 

      date_numero:
        friendly_name: "date numéro"
        value_template: >-
          {{'%02d'|format(now().day) }}        

      date_jour:
        friendly_name: "date jour"
        value_template: >-
          {% set days = ["Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche"]  %}
          {{ days[now().weekday()] }}

      date_jour_court:
        friendly_name: "date jour court"
        value_template: >-
          {% set days = ["L.", "M.", "Me.", "J.", "V.", "S.", "D."]  %}
          {{ days[now().weekday()] }}
          
      date_mois:

        friendly_name: "date mois"
        icon_template: mdi:calendar-today
        value_template: >
          {% set months = ["Janvier", "Fevrier", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Decembre"] %}
          {{  months[now().month-1] }}  
 
      date_mois_court:
        friendly_name: "date mois court"
        icon_template: mdi:calendar-today
        value_template: >
          {% set months = ["Janv", "Fev", "Mars", "Avr", "Mai", "Juin", "Jui", "Août", "Sept", "Oct", "Nov", "Déc"] %}
          {{  months[now().month-1] }}  
          
      date_simple:
        friendly_name: "Date du jour"
        icon_template: mdi:calendar-today
        value_template: >
          {{ (as_timestamp(states('sensor.date')) | timestamp_custom('%A %-d %B', true) | replace('Monday', 'Lundi') | replace('Tuesday', 'Mardi') | replace('Wednesday', 'Mercredi') | replace('Thursday', 'Jeudi') | replace('Friday', 'Vendredi') | replace('Saturday', 'Samedi') | replace('Sunday', 'Dimanche') | replace('January', 'Janvier') | replace('February', 'Février') | replace('March', 'Mars') | replace('April', 'Avril') | replace('May', 'Mai') | replace('June', 'Juin') | replace('July', 'Juillet') | replace('August', 'Août') | replace('September', 'Septembre') | replace('October', 'Octobre') | replace('November', 'Novembre') | replace('December', 'Décembre')) }}

      date_simple_v2:
        friendly_name: "Date du jour sans le nom du jour"
        icon_template: mdi:calendar-today
        value_template: >
          {{ (as_timestamp(states('sensor.date')) | timestamp_custom('%-d %B', true) | replace('Monday', 'Lundi') | replace('Tuesday', 'Mardi') | replace('Wednesday', 'Mercredi') | replace('Thursday', 'Jeudi') | replace('Friday', 'Vendredi') | replace('Saturday', 'Samedi') | replace('Sunday', 'Dimanche') | replace('January', 'Janvier') | replace('February', 'Février') | replace('March', 'Mars') | replace('April', 'Avril') | replace('May', 'Mai') | replace('June', 'Juin') | replace('July', 'Juillet') | replace('August', 'Août') | replace('September', 'Septembre') | replace('October', 'Octobre') | replace('November', 'Novembre') | replace('December', 'Décembre')) }}
    
          
      date_annee:
        friendly_name: "date année"
        value_template: >-
          {{ now().year }}

      date_annee_derniere:
        friendly_name: "date année dernière"
        value_template: >-
          {{ now().year -1}}
          
      date_court:
        friendly_name: "date courte avec l'année"
        value_template: >-
          {{ states.sensor.date_jour_court.state }} {{ states.sensor.date_numero.state }} {{ states.sensor.date_mois_court.state }} 
          
###### METEO
      weather_temperature:
        friendly_name: "Weather Température"
        unit_of_measurement: "°C"
        value_template: >-          
          {% if states.weather.ville.state == "unavailable" -%}
            {{ state_attr('weather.maison' , 'temperature') }}
          {% else -%}
            {{ state_attr('weather.ville' , 'temperature') }}
          {% endif -%} 

      weather_conditions:
        value_template: >-
            {% set meteo = states('weather.ville') %}
            {% set traduction = {'cloudy':'Nuageux', 'rainy':'Pluvieux', 'partlycloudy':'Un peu nuageux', 'clear-night':'Nuit claire', 'fog':'Brouillard', 'hail':'Grêle', 'lightning-rainy':'Pluie orageuse', 'lightning':'Orages', 'pouring':'Fortes pluies', 'snowy-rainy':'Neigeux', 'snowy':'Neigeux', 'sunny':'Ensoleillé', 'windy-variant':'Venteux', 'windy':'Venteux', 'exceptional':'Exceptionel'}%}
            
            {% if not state_attr('weather.ville', 'temperature') == 'Indisponible' -%}
              {% if meteo == 'lightning-rainy' -%}
                Pluies orageuses
              {% else -%}
                {{ traduction[meteo] }}
              {% endif -%}
            {% else -%}
              Pas d'info
            {% endif -%} 

      weather_conditions_pluie:
        value_template: >-          
            {% set precip = states('sensor.ville_rain_chance_2') | float(0) %}
            {{ precip }}   
          
      weather_conditions_neige:
        value_template: >-          
            {% set snow = states('sensor.ville_snow_chance_2') | float(0) %}
            {{ snow }}

          
      weather_conditions_ciel:
        value_template: >-        
            {% set ciel = states('sensor.ville_cloud_cover') | float(0) %}
            {{ ciel }}

      weather_conditions_vent:
        value_template: >-        
          {% set vent = state_attr('weather.ville', 'wind_speed') | float(0) %}
          {{ vent }}
          
      weather_conditions_uv:
        value_template: >-        
            {% set uv = states('sensor.ville_uv_2') | float(0) | round %}
            {{ uv if uv > 5 else uv }}
  
          
      weather_soleil:
        friendly_name: Soleil levé couché         
        value_template: >-
            {% set sun_state = is_state("sun.sun", "above_horizon") %}
            {{ as_timestamp(states.sun.sun.attributes['next_setting' if sun_state else 'next_rising']) | timestamp_custom("%H:%M") }}

        
      weather_temp_max:
        friendly_name: Température max du jour
        unit_of_measurement: "°C"
        value_template: "{{ states.weather.maison.attributes.forecast[0].temperature|float(0)|round(2) }}"  
        
      weather_temp_min:
        friendly_name: Température min du jour
        unit_of_measurement: "°C"
        value_template: "{{ states.weather.maison.attributes.forecast[0].templow|float(0)|round(0) }}"  
        
        
###### BONJOUR MESSAGE
      bonjour:
        friendly_name: Bonjour
        value_template: >-           
            {% set heure = states('sensor.time') %}
            {% set sun_state = states('sun.sun') %}
            {% set message = 'Salut' %}
            
            {% if sun_state == 'above_horizon' %}
              {% if '05:00' <= heure and heure < '11:45' %}
                {% set message = 'Bonne matinée' %}
              {% elif '11:45' <= heure and heure < '13:30' %}
                {% set message = 'Bon appétit' %}
              {% elif '13:30' <= heure and heure < '19:00' %}
                {% set message = 'Bon après-midi' %}
              {% elif '19:00' <= heure and heure < '23:00' %}
                {% set message = 'Bonsoir' %}
              {% elif heure >= '23:00' or heure < '04:00' %}
                {% set message = 'Bonne nuit' %}
              {% endif %}
            {% elif sun_state == 'below_horizon' %}
              {% if '05:00' <= heure and heure < '11:45' %}
                {% set message = 'Bonne matinée' %}
              {% elif '11:45' <= heure and heure < '13:30' %}
                {% set message = 'Bon appétit' %}
              {% elif '13:30' <= heure and heure < '18:00' %}
                {% set message = 'Bon après-midi' %}
              {% elif '18:00' <= heure and heure < '23:00' %}
                {% set message = 'Bonne soirée' %}
              {% elif heure >= '23:00' or heure < '05:00' %}
                {% set message = 'Bonne nuit' %}
              {% endif %}
            {% endif %}
            
            {{ message }}
          

###### ANNIVERSAIRES
      anniversaire:
        friendly_name: Anniversaire
        value_template: >-    
            {% set date_anniversaire = {
                '22 Mars': [('Alex', 1975)],
                '9 Fevrier': [('Anne', 1987)],
                '6 Mars': [('Yvan', 1973)],
                '25 Mars': [('Charlène', 1989)],
                '10 Mai': [('Mamie Janine', 1930)],
                '30 Mai': [('Manon', 2010), ('Monique', 1952)],
                '14 Juin': [('Marco', 1955)],
                '29 Juin': [('Monika', 1971), ('Aurel', 1980)],
                '14 Juillet': [('Luc', 1952)],
                '31 Juillet': [('Léane', 2011), ('Mamé',1931)],
                '23 Octobre': [('Tom', 2007)],
                '29 Octobre': [('Grégoire', 2001)],
                '31 Ocotobre': [('Antoine', 1993)],    
                '10 Décembre': [('Suzie', 1952)],
                '27 Décembre': [('Kevin', 1988)],
                '1 Janvier': [('Bonne année !', 0)],
                '8 Janvier': [('Nina', 2013)],    
                '13 Janvier': [('Maxime', 1987)],    
                '29 Janvier': [('Nadège', 1964)]
            } %}
            
            {% set today = states('sensor.date_simple_v2') %}
            {% set current_year = states('sensor.date_annee') | int %}
            
            {% if today in date_anniversaire %}
                {% set people = date_anniversaire[today] %}
                {% if people[0][0] == 'Bonne année !' %}
                    Bonne année {{ states.sensor.date_annee.state}} ! 
                {% else %}
                    {% for person in people %}
                        {% set name = person[0] %}
                        {% set birth_year = person[1] %}
                        {% set age = current_year - birth_year %}
                        {{ name }} ({{ age }} ans){% if not loop.last %}, {% endif %}
                    {% endfor %}
                {% endif %}
            {% else %}
                Aucun
            {% endif %}



          
###### THERMOMETRES TEMPERATURES HUMIDITE
          
      temp_sejour_arrondie:
        friendly_name: "Tempertaure arrondie du séjour"
        unit_of_measurement: "°C"
        value_template: >-
          {{ float(states.sensor.temp_sejour.state) | round(1) }} 

      hum_sejour_arrondie:
        friendly_name: "Humidité arrondie du séjour"
        unit_of_measurement: "%"
        icon_template: mdi:water
        value_template: >-
          {{ float(states.sensor.hum_sejour.state) | round(1) }} 
          
      temp_couloir_arrondie:
        friendly_name: "Tempertaure arrondie du couloir"
        unit_of_measurement: "°C"
        value_template: >-
          {{ float(states.sensor.temp_couloir_rdc.state) | round(1) }} 

      hum_couloir_arrondie:
        friendly_name: "Humidité arrondie du couloir"
        unit_of_measurement: "%"
        icon_template: mdi:water
        value_template: >-
          {{ float(states.sensor.hum_couloir_rdc.state) | round(1) }} 
          
      temp_cuisine_arrondie:
        friendly_name: "Tempertaure arrondie de la cuisine"
        unit_of_measurement: "°C"
        value_template: >-
          {{ float(states.sensor.temp_cuisine.state) | round(1) }} 

      hum_cuisine_arrondie:
        friendly_name: "Humidité arrondie de la cuisine"
        unit_of_measurement: "%"
        icon_template: mdi:water
        value_template: >-
          {{ float(states.sensor.hum_cuisine.state) | round(1) }} 
          
      temp_parents_arrondie:
        friendly_name: "Tempertaure arrondie de la chambre parentale"
        unit_of_measurement: "°C"
        value_template: >-
          {{ float(states.sensor.temp_parents.state) | round(1) }} 

      hum_parents_arrondie:
        friendly_name: "Humidité arrondie de la chambre parentale"
        unit_of_measurement: "%"
        icon_template: mdi:water
        value_template: >-
          {{ float(states.sensor.hum_parents.state) | round(1) }} 
          
      temp_tom_arrondie:
        friendly_name: "Tempertaure arrondie de la chambre de Tom"
        unit_of_measurement: "°C"
        value_template: >-
          {{ float(states.sensor.temp_tom.state) | round(1) }} 

      hum_tom_arrondie:
        friendly_name: "Humidité arrondie de la chambre de Tom"
        unit_of_measurement: "%"
        icon_template: mdi:water
        value_template: >-
          {{ float(states.sensor.hum_tom.state) | round(1) }} 
          
      temp_manon_arrondie:
        friendly_name: "Tempertaure arrondie de la chambre de Manon et Léane"
        unit_of_measurement: "°C"
        value_template: >-
          {{ float(states.sensor.temp_manon.state) | round(1) }}

      hum_manon_arrondie:
        friendly_name: "Humidité arrondie de la chambre de Manon"
        unit_of_measurement: "%"
        icon_template: mdi:water
        value_template: >-
          {{ float(states.sensor.hum_manon.state) | round(1) }} 
          
      temp_nina_arrondie:
        friendly_name: "Tempertaure arrondie de la chambre de Nina"
        unit_of_measurement: "°C"
        value_template: >-
          {{ float(states.sensor.temp_nina.state) | round(1) }}

      hum_nina_arrondie:
        friendly_name: "Humidité arrondie de la chambre de Nina"
        unit_of_measurement: "%"
        icon_template: mdi:water
        value_template: >-
          {{ float(states.sensor.hum_nina.state) | round(1) }} 

      compteur_thermo_hs:
        friendly_name: Compteur thermo indisponible          
        value_template: >-
          {%- set entities = expand('group.thermo') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
          {{ entities | count }}   
          
      thermo_hs:
        friendly_name: thermo indisponible          
        value_template: >-
          {%- set entities = expand('group.thermo') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
          {{ entities | join(', ') }}   
            

###### PRESENTS A LA MAISON

      appareils_connectes:
        friendly_name: Appareils connectés        
        value_template: >-
          {%- set entities = expand('group.connectes') | selectattr('state', 'in', ['on', 'home']) | map(attribute='name') | list -%}
          {{ entities | join(',') | replace('Tab', '') | replace('Mac', '') | replace('iPad', ' iPad') }}
         
      enfant_presence:
        friendly_name: Enfants présents          
        value_template: >-
          {%- set entities = expand('group.enfants') | selectattr('state', 'in', ['on', 'home']) | map(attribute='name') | list -%}
          {{ entities | join(', ') }} 


###### BOITE AUX LETTRES          
      boite_aux_lettres_ouvertee:
        friendly_name: boite aux lettres ouverte à          
        value_template: >-
          {{ as_timestamp(states.input_boolean.boite_aux_lettres_ouverte.last_changed) | timestamp_custom("%-Hh%M") }}
          
      courrier_releve:
        friendly_name: courrier relevé à          
        value_template: >-
          {{ as_timestamp(states.input_boolean.courrier_releve.last_changed) | timestamp_custom("%-Hh%M") }}

###### APPAREILS CHARGES
      appareils_charges:
        friendly_name: Appareils chargés          
        value_template: >-
          {%- set entities = expand('group.appareils_charges') | selectattr('state', 'in', ['Full', 'full']) | map(attribute='name') | list -%}
          {{ entities | join(', ') if entities else 'Aucun'}} 

         
###### SERRURES         

      compteur_serrures:
        friendly_name: Compteur serrures ouvertes          
        value_template: >-
            {%- set entities = expand('group.serrures') | selectattr('state', 'eq', 'unlocked') | map(attribute='name') | list -%}
            {{ entities | count }}
            
      serrure_ouverte:
        friendly_name: serrures ouvertes          
        value_template: >-
            {%- set entities = expand('group.serrures') | selectattr('state', 'eq', 'unlocked') | map(attribute='name') | list -%}
            {{ entities | join(', ') if entities else 'Aucune' }}
            
      serrures_bloquees: 
        friendly_name: Surveillance serrures bloquées
        value_template: >-  
          {%- set entities = expand('group.serrures') | selectattr('state', 'eq', 'jammed') | map(attribute='name') | list -%}
          {{ entities | join(', ') if entities else 'OK' }}

      serrures_hs: 
        friendly_name: Surveillance serrures indisponibles
        value_template: >-
          {%- set entities = expand('group.serrures') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
          {{ entities | join(', ') if entities else 'Aucun'}} 

      compteur_serrures_hs: 
        friendly_name: compteur serrures indisponibles
        value_template: >-
          {%- set entities = expand('group.serrures') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
          {{ entities | count }}          
          
###### MODES   
      compteur_modes:
        friendly_name: Compteur modes         
        value_template: >
            {%- set entities = expand('group.mode') | selectattr('state', 'eq', 'on') | map(attribute='name') | list -%}
            {{ entities | count }}
          
      modes:
        friendly_name: Modes en cours
        value_template: >-      
            {%- set entities = expand('group.mode') | selectattr('state', 'eq', 'on') | map(attribute='name') | list -%}
            {{ entities | join(', ') if entities else 'Aucun'}}

###### PRESENCES FP2
      compteur_presence_sejour:
        friendly_name: "Compteur Présence Séjour"
        value_template: >-
            {%- set entities = expand('group.presence_sejour') | selectattr('state', 'eq', 'on') | map(attribute='name') | list -%}
            {{ entities | count }}


###### NOEL          
      compteur_noel:
        friendly_name: Compteur Noel          
        value_template: >-
            {%- set entities = expand('group.noel') | selectattr('state', 'eq', 'on') | map(attribute='name') | list -%}
            {{ entities | count }}

      noel_on:
        friendly_name:  Noel allumé        
        value_template: >-
            {%- set entities = expand('group.noel') | selectattr('state', 'eq', 'on') | map(attribute='name') | list -%}
            {{ entities | join(', ') }}
            
      compteur_noel_hs:
        friendly_name: Compteur Noel HS        
        value_template: >-
          {%- set entities = expand('group.noel') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
          {{ entities | count }} 

      noel_hs:
        friendly_name: noel indisponible          
        value_template: >-
          {%- set entities = expand('group.noel') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
          {{ entities | join(', ') }}         
          
          
###### REVEILS ALEXA

      verif_reveils_cours:
        friendly_name: Verifier si réveils ou cours         
        value_template: >-
            {%- set reveil_tom = not is_state('sensor.tom_reveil', 'Aucun') -%}
            {%- set reveil_manon = not is_state('sensor.manon_reveil', 'Aucun') -%}
            {%- set reveil_leane = not is_state('sensor.leane_reveil', 'Aucun') -%}
            {%- set reveil_nina = not is_state('sensor.nina_reveil', 'Aucun') -%}
            {%- set tom_cours_aujourdhui = states('sensor.debut_des_cours_de_tom_aujourd_hui') -%}
            {%- set manon_cours_aujourdhui = states('sensor.debut_des_cours_de_manon_aujourd_hui') -%}
            {%- set leane_cours_aujourdhui = states('sensor.debut_des_cours_de_leane_aujourd_hui') -%}
            {%- set tom_cours_demain = states('sensor.debut_des_cours_de_tom_demain') -%}
            {%- set manon_cours_demain = states('sensor.debut_des_cours_de_manon_demain') -%}
            {%- set leane_cours_demain = states('sensor.debut_des_cours_de_leane_demain') -%}
            
            {%- if is_state("input_boolean.reveils", "off") and
                   tom_cours_aujourdhui == "Pas cours" and
                   manon_cours_aujourdhui == "Pas cours" and
                   leane_cours_aujourdhui == "Pas cours" and
                   tom_cours_demain == "Pas cours" and
                   manon_cours_demain == "Pas cours" and
                   leane_cours_demain == "Pas cours" -%}
              off
            {%- else %}
              on
            {%- endif -%}
            
      reveil:
        friendly_name: Réveils          
        value_template: >-
            {% if is_state("input_boolean.reveils", "on") -%} 
              {%- set Tom = not states('sensor.tom_next_alarm') == 'unknown'  %}
              {%- set Manon = not states('sensor.manon_next_alarm') == 'unknown' %}
              {%- set Leane = not states('sensor.leane_next_alarm') == 'unknown'  %}
              {%- set Nina = not states('sensor.nina_next_alarm') == 'unknown'  %}          
               {%- set alarms = [] -%}
               {%- if Tom -%}
                 {%- set alarms = alarms + ['Tom ' ~ states('sensor.tom_reveil')] -%}
               {%- endif -%}
               {%- if Manon -%}
                 {%- set alarms = alarms + ['Manon ' ~ states('sensor.manon_reveil')] -%}
               {%- endif -%}
               {%- if Leane -%}
                 {%- set alarms = alarms + ['Leane ' ~ states('sensor.leane_reveil')] -%}
               {%- endif -%}
               {%- if Nina -%}
                 {%- set alarms = alarms + ['Nina ' ~ states('sensor.nina_reveil')] -%}
               {%- endif -%}
              
               {{ alarms | join(', ') }}
            {%- else -%}
               Aucun réveil
            {%- endif %}
          
      tom_reveil_annonce:
        friendly_name: Tom Réveil annonce Alexa       
        value_template: >-
            {% set demain = (as_timestamp(now()) + 86400) | timestamp_custom("%d-%m", true) %}
            {% set tom_next_alarm = states('sensor.tom_next_alarm') %}
            
            {% if not is_state("sensor.tom_reveil", "Aucun") and tom_next_alarm != 'unknown' %}
              {% set tom = as_timestamp(tom_next_alarm) | timestamp_custom("%d-%m", true) %}
              {% if demain == tom %}
                Ton réveil est à {{ as_timestamp(tom_next_alarm) | timestamp_custom("%H:%M", true) }}
              {% endif %}
            {% endif %}
 
          
      filles_reveil_annonce:
        friendly_name: Filles Réveil annonce Alexa       
        value_template: >-
            {% set entities = [
              'nina',
              'leane',
              'manon',
            ] %}
            
            {% set demain = (as_timestamp(now()) + 86400) | timestamp_custom("%d-%m", true) %}
            
            {% for entity in entities %}
              {% set next_alarm = states("sensor." ~ entity ~ "_next_alarm") %}
              {% set reveil = states("sensor." ~ entity ~ "_reveil") %}
            
              {% if reveil != "Aucun" and next_alarm != "unknown" %}
                {% set date = as_timestamp(next_alarm) | timestamp_custom("%d-%m", true) %}
                {% set name = (entity == 'leane') and 'Léane' or entity | capitalize %}
                
                {% if date == demain %}
                  {{ name }}, ton réveil est à {{ as_timestamp(next_alarm) | timestamp_custom("%H:%M", true) }}
                {% endif %}
              {% endif %}
            {% endfor %}

      tom_reveil:
        friendly_name: Réveil Tom
        value_template: >-
          {% if states('sensor.tom_next_alarm') == 'unknown' %}
            Aucun
          {% else -%}
            {% set reveil = as_timestamp(states('sensor.tom_next_alarm')) | timestamp_custom('%A %Hh%M')
            | replace('Monday', 'L.')
            | replace('Tuesday', 'M.')
            | replace('Wednesday', 'Me.')
            | replace('Thursday', 'J.')
            | replace('Friday', 'V.')
            | replace('Saturday', 'S.')
            | replace('Sunday', 'D.') %}
            {{ reveil }}
          {% endif %}
          
      tom_reveil_date:
        friendly_name: Réveil Tom
        value_template: >-
            {% if states('sensor.tom_next_alarm') != 'unknown' %}
              {{ as_timestamp(states('sensor.tom_next_alarm')) | timestamp_custom('%d/%m') }}
            {% else %}
              La prochaine alarme est inconnue
            {% endif %}
            
      manon_reveil:
        friendly_name: Réveil manon 
        value_template: >-
          {% if states('sensor.manon_next_alarm') == 'unknown' %}
            Aucun
          {% else -%}
            {% set reveil = as_timestamp(states('sensor.manon_next_alarm')) | timestamp_custom('%A %Hh%M')
            | replace('Monday', 'L.')
            | replace('Tuesday', 'M.')
            | replace('Wednesday', 'Me.')
            | replace('Thursday', 'J.')
            | replace('Friday', 'V.')
            | replace('Saturday', 'S.')
            | replace('Sunday', 'D.') %}
            {{ reveil }}            
          {% endif %}
          
      leane_reveil:
        friendly_name: Réveil leane 
        value_template: >-
          {% if states('sensor.leane_next_alarm') == 'unknown' %}
            Aucun
          {% else -%}
            {% set reveil = as_timestamp(states('sensor.leane_next_alarm')) | timestamp_custom('%A %Hh%M')
            | replace('Monday', 'L.')
            | replace('Tuesday', 'M.')
            | replace('Wednesday', 'Me.')
            | replace('Thursday', 'J.')
            | replace('Friday', 'V.')
            | replace('Saturday', 'S.')
            | replace('Sunday', 'D.') %}
            {{ reveil }} 
          {% endif %}
          
      nina_reveil:
        friendly_name: Réveil Nina 
        value_template: >-
          {% if states('sensor.nina_next_alarm') == 'unknown' %}
            Aucun
          {% else -%}
            {% set reveil = as_timestamp(states('sensor.nina_next_alarm')) | timestamp_custom('%A %Hh%M')
            | replace('Monday', 'L.')
            | replace('Tuesday', 'M.')
            | replace('Wednesday', 'Me.')
            | replace('Thursday', 'J.')
            | replace('Friday', 'V.')
            | replace('Saturday', 'S.')
            | replace('Sunday', 'D.') %}
            {{ reveil }} 
          {% endif %}
          
      compteur_reveil_off:
        friendly_name: Compteur reveil eteint         
        value_template: >-
            {%- set entities = expand('group.reveils') | selectattr('state', 'eq', 'unknown') | map(attribute='name') | list -%}
            {{ entities | count }}
         
          
###### MINUTEUR ALEXA
      compteur_minuteur:
        friendly_name: Compteur minuteur          
        value_template: >-
          {% set minuteur = [
           states.sensor.le_bureau_next_timer,
           states.sensor.le_salon_next_timer,
           states.sensor.la_cuisine_next_timer,
           states.sensor.la_salle_de_bain_next_timer,
           states.sensor.papa_next_timer,
           states.sensor.maman_next_timer,
           states.sensor.tom_next_timer,
           states.sensor.nina_next_timer,
           states.sensor.leane_next_timer,
           states.sensor.manon_next_timer,

           ] %}
          {{ minuteur | selectattr('state','!=','unknown') | list | count }}

      minuteur_bureau:
        friendly_name: Minuteur bureau         
        value_template: >-
            {% if is_state('sensor.le_bureau_next_timer', 'unknown') %}
              'N/A'
            {% else %}
              {{ (as_timestamp(states('sensor.le_bureau_next_timer')) | int - now().timestamp()) | int | timestamp_custom('%H:%M:%S', false) }}
            {% endif %}          
      minuteur_salon:
        friendly_name: Minuteur salon         
        value_template: >-
            {% if is_state('sensor.le_salon_next_timer', 'unknown') %}
              'N/A'
            {% else %}
              {{ (as_timestamp(states('sensor.le_salon_next_timer')) | int - now().timestamp()) | int | timestamp_custom('%H:%M:%S', false) }}
            {% endif %}          
      minuteur_cuisine:
        friendly_name: Minuteur cuisine         
        value_template: >-
            {% if is_state('sensor.la_cuisine_next_timer', 'unknown') %}
              'N/A'
            {% else %}
              {{ (as_timestamp(states('sensor.la_cuisine_next_timer')) | int - now().timestamp()) | int | timestamp_custom('%H:%M:%S', false) }}
            {% endif %}
          
      minuteur_sdb:
        friendly_name: Minuteur sdb         
        value_template: >-
            {% if is_state('sensor.la_salle_de_bain_next_timer', 'unknown') %}
              'N/A'
            {% else %}
              {{ (as_timestamp(states('sensor.la_salle_de_bain_next_timer')) | int - now().timestamp()) | int | timestamp_custom('%H:%M:%S', false) }}
            {% endif %}          
      minuteur_aurel:
        friendly_name: Minuteur aurel         
        value_template: >-
            {% if is_state('sensor.papa_next_timer', 'unknown') %}
              'N/A'
            {% else %}
              {{ (as_timestamp(states('sensor.papa_next_timer')) | int - now().timestamp()) | int | timestamp_custom('%H:%M:%S', false) }}
            {% endif %}          
      minuteur_alex:
        friendly_name: Minuteur alex         
        value_template: >-
            {% if is_state('sensor.maman_next_timer', 'unknown') %}
              'N/A'
            {% else %}
              {{ (as_timestamp(states('sensor.maman_next_timer')) | int - now().timestamp()) | int | timestamp_custom('%H:%M:%S', false) }}
            {% endif %}          
      minuteur_tom:
        friendly_name: Minuteur tom         
        value_template: >-
            {% if is_state('sensor.tom_next_timer', 'unknown') %}
              'N/A'
            {% else %}
              {{ (as_timestamp(states('sensor.tom_next_timer')) | int - now().timestamp()) | int | timestamp_custom('%H:%M:%S', false) }}
            {% endif %}          
      minuteur_nina:
        friendly_name: Minuteur nina         
        value_template: >-
            {% if is_state('sensor.nina_next_timer', 'unknown') %}
              'N/A'
            {% else %}
              {{ (as_timestamp(states('sensor.nina_next_timer')) | int - now().timestamp()) | int | timestamp_custom('%H:%M:%S', false) }}
            {% endif %}          
      minuteur_leane:
        friendly_name: Minuteur leane         
        value_template: >-
            {% if is_state('sensor.leane_next_timer', 'unknown') %}
              'N/A'
            {% else %}
              {{ (as_timestamp(states('sensor.leane_next_timer')) | int - now().timestamp()) | int | timestamp_custom('%H:%M:%S', false) }}
            {% endif %}          
      minuteur_manon:
        friendly_name: Minuteur manon         
        value_template: >-
            {% if is_state('sensor.manon_next_timer', 'unknown') %}
              'N/A'
            {% else %}
              {{ (as_timestamp(states('sensor.manon_next_timer')) | int - now().timestamp()) | int | timestamp_custom('%H:%M:%S', false) }}
            {% endif %}         
###### RAPPELS ALEXA

      compteur_rappel:
        friendly_name: Compteur rappel         
        value_template: >-
            {{states                                  
            | selectattr('entity_id', 'search', 'reminder') 
            | selectattr('state', '!=', 'unknown')
            | rejectattr('entity_id', 'search', 'sensor.aurel_s_voice_in_a_can_for_ios_next_reminder')
            | rejectattr('entity_id', 'search', 'sensor.aurel_s_voice_in_a_can_for_apple_watch_next_reminder')
            | rejectattr('entity_id', 'search', 'sensor.aurel_s_2nd_voice_in_a_can_for_apple_watch_next_reminder')
            | rejectattr('entity_id', 'search', 'sensor.tv_salon_next_reminder')
            | map(attribute='name') | list | count}}
          
      rappel:
        friendly_name: rappel         
        value_template: >-
            {% if is_state('sensor.le_bureau_next_reminder', 'unknown') %}
            
            {% else %}
            
            {% set sensor_entity = 'sensor.le_bureau_next_reminder' %}
            {% set name = state_attr(sensor_entity, 'friendly_name') %}
            {% set reminder = state_attr(sensor_entity, 'reminder') %}
            
            {% set time = as_timestamp(states(sensor_entity)) | timestamp_custom("%d/%m à %Hh%M") %}
            {{ name | replace('next Reminder', '')}}: {{ reminder }} le {{ time }} <br>
            
            {% endif %}
            
            {% if is_state('sensor.le_salon_next_reminder', 'unknown') %}
            
            {% else %}
            
            {% set sensor_entity = 'sensor.le_bureau_next_reminder' %}
            {% set name = state_attr(sensor_entity, 'friendly_name') %}
            {% set reminder = state_attr(sensor_entity, 'reminder') %}
            
            {% set time = as_timestamp(states(sensor_entity)) | timestamp_custom("%d/%m à %Hh%M") %}
            {{ name | replace('next Reminder', '')}}: {{ reminder }} le {{ time }} <br>
            
            {% endif %}
            
            {% if is_state('sensor.la_cuisine_next_reminder', 'unknown') %}
            
            {% else %}
            
            {% set sensor_entity = 'sensor.le_bureau_next_reminder' %}
            {% set name = state_attr(sensor_entity, 'friendly_name') %}
            {% set reminder = state_attr(sensor_entity, 'reminder') %}
            
            {% set time = as_timestamp(states(sensor_entity)) | timestamp_custom("%d/%m à %Hh%M") %}
            {{ name | replace('next Reminder', '')}}: {{ reminder }} le {{ time }} <br>
            
            {% endif %}
            
            {% if is_state('sensor.le_garage_next_reminder', 'unknown') %}
            
            {% else %}
            
            {% set sensor_entity = 'sensor.le_bureau_next_reminder' %}
            {% set name = state_attr(sensor_entity, 'friendly_name') %}
            {% set reminder = state_attr(sensor_entity, 'reminder') %}
            
            {% set time = as_timestamp(states(sensor_entity)) | timestamp_custom("%d/%m à %Hh%M") %}
            {{ name | replace('next Reminder', '')}}: {{ reminder }} le {{ time }} <br>
            
            {% endif %}
                        
            {% if is_state('sensor.la_salle_de_bain_next_reminder', 'unknown') %}
            
            {% else %}
            
            {% set sensor_entity = 'sensor.le_bureau_next_reminder' %}
            {% set name = state_attr(sensor_entity, 'friendly_name') %}
            {% set reminder = state_attr(sensor_entity, 'reminder') %}
            
            {% set time = as_timestamp(states(sensor_entity)) | timestamp_custom("%d/%m à %Hh%M") %}
            {{ name | replace('next Reminder', '')}}: {{ reminder }} le {{ time }} <br>
            
            {% endif %}
            
            {% if is_state('sensor.tom_next_reminder', 'unknown') %}
            
            {% else %}
            
            {% set sensor_entity = 'sensor.le_bureau_next_reminder' %}
            {% set name = state_attr(sensor_entity, 'friendly_name') %}
            {% set reminder = state_attr(sensor_entity, 'reminder') %}
            
            {% set time = as_timestamp(states(sensor_entity)) | timestamp_custom("%d/%m à %Hh%M") %}
            {{ name | replace('next Reminder', '')}}: {{ reminder }} le {{ time }} <br>
            
            {% endif %}
            
            {% if is_state('sensor.nina_next_reminder', 'unknown') %}
            
            {% else %}
            
            {% set sensor_entity = 'sensor.le_bureau_next_reminder' %}
            {% set name = state_attr(sensor_entity, 'friendly_name') %}
            {% set reminder = state_attr(sensor_entity, 'reminder') %}
            
            {% set time = as_timestamp(states(sensor_entity)) | timestamp_custom("%d/%m à %Hh%M") %}
            {{ name | replace('next Reminder', '')}}: {{ reminder }} le {{ time }} <br>
            
            {% endif %}
            
            {% if is_state('sensor.manon_next_reminder', 'unknown') %}
            
            {% else %}
            
            {% set sensor_entity = 'sensor.le_bureau_next_reminder' %}
            {% set name = state_attr(sensor_entity, 'friendly_name') %}
            {% set reminder = state_attr(sensor_entity, 'reminder') %}
            
            {% set time = as_timestamp(states(sensor_entity)) | timestamp_custom("%d/%m à %Hh%M") %}
            {{ name | replace('next Reminder', '')}}: {{ reminder }} le {{ time }} <br>
            
            {% endif %}
            
            {% if is_state('sensor.la_cuisine_next_reminder', 'unknown') %}
            
            {% else %}
            
            {% set sensor_entity = 'sensor.leane_next_reminder' %}
            {% set name = state_attr(sensor_entity, 'friendly_name') %}
            {% set reminder = state_attr(sensor_entity, 'reminder') %}
            
            {% set time = as_timestamp(states(sensor_entity)) | timestamp_custom("%d/%m à %Hh%M") %}
            {{ name | replace('next Reminder', '')}}: {{ reminder }} le {{ time }} <br>
            
            {% endif %}

          
###### AUTRES HS COMPTEURS ET LISTES

## PLANTES          
      compteur_plante_hs:
        friendly_name: Compteur plante indisponible          
        value_template: >-
          {%- set entities = expand('group.plantes') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
          {{ entities | count }} 

      plante_hs:
        friendly_name: Compteur plante indisponible          
        value_template: >-
          {%- set entities = expand('group.plantes') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
          {{ entities | join(', ') }} 
          
## ZIGBEE          
      compteur_zigbee_hs:
        friendly_name: Compteur zigbee indisponible          
        value_template: >-
          {%- set entities = expand('group.zigbee') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
          {{ entities | count }} 
            
      zigbee_hs:
        friendly_name: zigbee indisponible          
        value_template: >-
          {%- set entities = expand('group.zigbee') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
          {{ entities | join(', ') }} 

## CAMERAS
      compteur_camera_hs:
        friendly_name: Compteur camera indisponible          
        value_template: >-
          {%- set entities = expand('group.cameras') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
          {{ entities |count }} 

      camera_hs:
        friendly_name: camera indisponible          
        value_template: >-
          {%- set entities = expand('group.cameras') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
          {{ entities | join(', ') }} 

## INTERRUPTEURS            
      compteur_inter_hs:
        friendly_name: Compteur interrupteur indisponible          
        value_template: >-
          {%- set entities = expand('group.interrupteurs') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
          {{ entities | count }} 
            
      inter_hs:
        friendly_name: interrupteur indisponible          
        value_template: >-
          {%- set entities = expand('group.interrupteurs') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
          {{ entities | join(', ') }} 
          
         
###### MOUSTIQUES

      moustique:
        friendly_name: Prises anti moustiques allumées          
        value_template: >-
            {%- set entities = expand('group.moustiques') | selectattr('state', 'eq', 'on') | map(attribute='name') | list -%}
            {{ entities | join(', ') }}

      compteur_moustique:
        friendly_name: Compteur prises moustiques         
        value_template: >
            {%- set entities = expand('group.moustiques') | selectattr('state', 'eq', 'on') | map(attribute='name') | list -%}
            {{ entities | count }}

      compteur_moustique_hs:
        friendly_name: Compteur prises anti moustiques indisponible          
        value_template: >-
          {%- set entities = expand('group.moustiques') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
          {{ entities | count }} 
            
      moustique_hs:
        friendly_name: prises anti moustiques indisponible          
        value_template: >-
          {%- set entities = expand('group.moustiques') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
          {{ entities | join(', ') }} 
            
###### LUMIERES
         
      lumiere_etat:
        friendly_name: Lumières ON 
        value_template: >-  
            {%- set entities = expand('light.tout') | selectattr('state', 'eq', 'on') | map(attribute='name') | list -%}
            {{ entities | join(', ') if entities else 'Aucune'}}

      pieces_allumees:
        friendly_name: Pièces allumées 
        value_template: >- 
            {% set lights_on = states.light
              | selectattr('entity_id', 'in', state_attr('light.pieces', 'entity_id'))
              | selectattr('state', 'eq', 'on')
              | map(attribute='name')
              | list
            %}
            {% if lights_on %}
              {{ lights_on | join(', ') }}
            {% else %}
              Aucune
            {% endif %}
          
      compteur_sam:
        friendly_name: Compteur sam         
        value_template: >
            {%- set entities = expand('light.sam') | selectattr('state', 'eq', 'on') | map(attribute='name') | list -%}
            {{ entities | count }}

      compteur_parents:
        friendly_name: Compteur parents         
        value_template: >
            {%- set entities = expand('light.parents') | selectattr('state', 'eq', 'on') | map(attribute='name') | list -%}
            {{ entities | count }}  
          
      compteur_tom:
        friendly_name: Compteur tom         
        value_template: >
            {%- set entities = expand('light.tom') | selectattr('state', 'eq', 'on') | map(attribute='name') | list -%}
            {{ entities | count }} 
          
      compteur_manon:
        friendly_name: Compteur manon léane         
        value_template: >
            {%- set entities = expand('light.manon_et_leane') | selectattr('state', 'eq', 'on') | map(attribute='name') | list -%}
            {{ entities | count }}   
          
      compteur_nina:
        friendly_name: Compteur nina         
        value_template: >
            {%- set entities = expand('light.nina') | selectattr('state', 'eq', 'on') | map(attribute='name') | list -%}
            {{ entities | count }}   

      compteur_escaliers:
        friendly_name: Compteur escalier et palier         
        value_template: >
            {%- set entities = expand('light.escaliers') | selectattr('state', 'eq', 'on') | map(attribute='name') | list -%}
            {{ entities | count }}
          
      compteur_wc:
        friendly_name: Compteur wc         
        value_template: >
            {%- set entities = expand('light.lavabo') | selectattr('state', 'eq', 'on') | map(attribute='name') | list -%}
            {{ entities | count }}

      compteur_lumiere:
        friendly_name: Compteur lumières allumées          
        value_template: >
            {%- set entities = expand('light.tout') | selectattr('state', 'eq', 'on') | map(attribute='name') | list -%}
            {{ entities | count }}
          
      compteur_sdb:
        friendly_name: Compteur sdb      
        value_template: >
          {% set lights = [
           states.switch.radiateur,
           ] %}
          {{ lights | selectattr('state','eq','on') | list | count }}
          
      compteur_sejour:
        friendly_name: Compteur séjour      
        value_template: >
            {%- set entities = expand('light.sejour') | selectattr('state', 'eq', 'on') | map(attribute='name') | list -%}
            {{ entities | count }}
          
          
      compteur_cagibi:
        friendly_name: Compteur cagibi        
        value_template: >
          {% set lights = [
           states.light.cagibi,
           ] %}
          {{ lights | selectattr('state','eq','on') | list | count }}
          
      compteur_entree:
        friendly_name: Compteur entrée         
        value_template: >
            {%- set entities = expand('light.entree_et_couloir') | selectattr('state', 'eq', 'on') | map(attribute='name') | list -%}
            {{ entities | count }}
          
      compteur_salon:
        friendly_name: Compteur salon         
        value_template: >
            {%- set entities = expand('light.salon') | selectattr('state', 'eq', 'on') | map(attribute='name') | list -%}
            {{ entities | count }}

      compteur_bureau:
        friendly_name: Compteur bureau         
        value_template: >
          {% set lights = [
           states.light.lampe_de_bureau,
           ] %}
          {{ lights | selectattr('state','eq','on') | list | count }} 

      compteur_lumieres_hs:
        friendly_name: Compteur lumières indisponibles         
        value_template: >-
          {%- set entities = expand('light.tout') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
          {{ entities | count }} 
 
      lumiere_hs:
        friendly_name: Lumières HS (automatisation lum hs notif)
        value_template: >-  
          {%- set entities = expand('light.tout') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
          {{ entities | join(', ') }} 

      luminosite_sejour:
        friendly_name: Luminosité séjour
        value_template: >-  
         {{ ((states.light.sejour.attributes.brightness|float(0)*100/254))|round(0)}}
         
###### MOUVEMENTS

      mouv_on:
        friendly_name: mouvements état
        value_template: >-      
            {%- set entities = expand('binary_sensor.mouvements') | selectattr('state', 'eq', 'on') | map(attribute='name') | list -%}
            {{ entities | join(', ') if entities else 'Aucun' }}
         
      compteur_mouvement:
        friendly_name: Compteur mouvement         
        value_template: >
            {%- set entities = expand('binary_sensor.mouvements') | selectattr('state', 'eq', 'on') | map(attribute='name') | list -%}
            {{ entities | count }}

      compteur_mouv_hs:
        friendly_name: Compteur mouvement indisponible          
        value_template: >-
          {%- set entities = expand('binary_sensor.mouvements') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
          {{ entities | count }} 

      mouv_hs:
        friendly_name: Mouvement indisponible          
        value_template: >-
          {%- set entities = expand('binary_sensor.mouvements') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
            {{ entities | join(', ') }}
            
###### PORTES

      porte_on:
        friendly_name: Porte état
        value_template: >-      
            {%- set entities = expand('binary_sensor.portes') | selectattr('state', 'eq', 'on') | map(attribute='name') | list -%}
            {{ entities | join(', ') if entities else 'Aucune'}}

      compteur_portes:
        friendly_name: Compteur portes ouvertes          
        value_template: >
            {%- set entities = expand('binary_sensor.portes') | selectattr('state', 'eq', 'on') | map(attribute='name') | list -%}
            {{ entities | count }}
            
      compteur_porte_hs:
        friendly_name: Compteur porte indisponible          
        value_template: >-
          {%- set entities = expand('binary_sensor.portes') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
            {{ entities | count}}

      porte_hs:
        friendly_name: Porte indisponible          
        value_template: >-
          {%- set entities = expand('binary_sensor.portes') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
            {{ entities | join(', ') }}
            
##### APPAREILS
      appareils:
        friendly_name: Autres appareils 
        value_template: >-         
            {%- set desired_states = ['on', 'cleaning'] -%}
            {%- set entities = expand('group.appareils') | selectattr('state', 'in', desired_states) | map(attribute='name') | list -%}
            {{ entities | join(', ') if entities else 'Aucun'}}

      compteur_autre:
        friendly_name: Compteur autre          
        value_template: >
            {%- set entities = expand('group.appareils') | selectattr('state', 'eq', 'on') | map(attribute='name') | list -%}
            {{ entities | count }}         
         
###### TV

      compteur_tv:
        friendly_name: Compteur TV           
        value_template: >-
            {%- set entities = expand('group.tv') | selectattr('state', 'eq', 'on') | map(attribute='name') | list -%}
            {{ entities | count }}

      tv_on:
        friendly_name: TV           
        value_template: >-
            {%- set entities = expand('group.tv') | selectattr('state', 'eq', 'on') | map(attribute='name') | list -%}
            {{ entities | join(', ') if entities else 'Aucune'}} 

      compteur_apple_tv:
        friendly_name: Compteur Apple TV           
        value_template: >-
            {%- set entities = expand('group.apple_tv') | selectattr('state', 'eq', 'playing') | map(attribute='name') | list -%}
            {{ entities | count }}

      tv_hs:
        friendly_name: TV hs          
        value_template: >-            
          {%- set entities = expand('group.tv') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
            {{ entities | join(', ') }}
            
      apple_tv_on:
        friendly_name: Apple TV allumée           
        value_template: >-
            {%- set entities = expand('group.apple_tv') | selectattr('state', 'eq', 'playing') | map(attribute='name') | list -%}
            {{ entities | join(', ') if entities else 'Aucune'}} 

      apple_tv_hs:
        friendly_name: Apple TV hs         
        value_template: >-            
          {%- set entities = expand('group.apple_tv') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
            {{ entities | join(', ') }}    
            
      tv_salon_source: 
        friendly_name: TV salon source
        value_template: >- 
            {% set media = states.media_player.tv_salon.state  %}            
            {% set source = states.media_player.tv_salon.attributes.source
               | replace('Live TV', 'Live TV')
               | replace('Lecteur multimédia', 'Disque dur')
               | replace('Tableau de bord Maison', 'Menu')
               | replace('Nintendo Switch', 'Switch')
               | replace('Apple OTT', 'Apple TV')               
               | replace('HDMI 2', 'Wii') %}            
            {% set app_id = states.media_player.apple_tv_sejour.attributes.get('app_id', 'Apple TV')
               | replace('com.apple.TVAirPlay', 'AirPlay')
               | replace('com.google.ios.youtube', 'YouTube')
               | replace('com.plexapp.plex', 'Plex')
               | replace('com.amazon.aiv.AIVApp', 'Prime Video')
               | replace('tv.molotov.MolotovAppProd', 'Molotov')               
               | replace('com.netflix.Netflix', 'Netflix') %}
            {% set app_name = states.media_player.apple_tv_sejour.attributes.app_name %}

            {% if media == "on"  %} 
              {% if source is defined and source != "Apple TV" %}
                {{ source }}
              {% elif source is defined and source == "Apple TV" %}
                {% if app_name is defined  %}
                {{ app_name | replace('Musique', 'Menu') }} 
                {% elif app_name is undefined  %}
                {{ app_id  }}
                {% else %}
                Menu 
                {% endif %}
              {% endif %}
            {% else %}
            {% endif %}
            
      tv_salon_vol:
        friendly_name: TV salon volume
        value_template: >-      
          {{ (state_attr('media_player.tv_salon','volume_level') |float(0) *100)|round(0) }}

      apple_tv_salon_app_name: 
        friendly_name: Apple TV salon nom application
        value_template: >- 
            {%- if states.media_player.apple_tv_salon.attributes.app_name is defined -%}
              {{ states.media_player.apple_tv_salon.attributes.app_name }}
            {%- else -%}              
            {%- endif %}
          
      tv_salon_media_artist: 
        friendly_name: TV salon artiste média
        value_template: >- 
            {%- if states.media_player.apple_tv_salon.attributes.media_artist is defined -%}
              {{ states.media_player.apple_tv_salon.attributes.media_artist }}
            {%- else -%}              
            {%- endif %}
            
      tv_salon_duree_media:
        friendly_name: TV salon durée média
        value_template: >-  
            {% if states.media_player.apple_tv_sejour.attributes.media_duration is defined %}
              {% set total_seconds = float(states.media_player.apple_tv_sejour.attributes.media_duration) %}
              {% set hours = total_seconds // 3600 %}
              {% set minutes = (total_seconds % 3600) // 60 %}
              {% set seconds = total_seconds % 60 %}
              {{ "%02d:%02d:%02d" | format(hours, minutes, seconds) }}
            {% else %}
            {% endif %}  
            
      tv_salon_position_media:
        friendly_name: TV salon durée position
        value_template: >-  
            {% if states.media_player.apple_tv_sejour.attributes.media_position is defined %}
              {% set total_seconds = float(states.media_player.apple_tv_sejour.attributes.media_position) %}
              {% set hours = total_seconds // 3600 %}
              {% set minutes = (total_seconds % 3600) // 60 %}
              {% set seconds = total_seconds % 60 %}
              {{ "%02d:%02d:%02d" | format(hours, minutes, seconds) }}
            {% else %}
            {% endif %}  
            
      tv_salon_duree_restante:
        friendly_name: TV salon durée restante
        value_template: >-  
            {% if is_state('media_player.apple_tv_sejour', 'playing') %}
              {% set total_seconds = (states.media_player.apple_tv_sejour.attributes.media_duration) - (float(states.media_player.apple_tv_sejour.attributes.media_position) ) | round(0) %}
              {% set hours = total_seconds // 3600 %}
              {% set minutes = (total_seconds % 3600) // 60 %}
              {% set seconds = total_seconds % 60 %}
              -{{ "%02d:%02d:%02d" | format(hours, minutes, seconds) }}
            {% else %}
            {% endif %}  
            
      tv_salon_duree_media_pourcentage:
        friendly_name: TV salon durée média
        value_template: >-      
            {%- if states.media_player.apple_tv_sejour.attributes.media_position is defined and states.media_player.apple_tv_sejour.attributes.media_duration is defined -%}
              {{ (((float(states.media_player.apple_tv_sejour.attributes.media_position) * 100) / float(states.media_player.apple_tv_sejour.attributes.media_duration)) | round(1))| round(0) }}
            {%- else -%}
            {%- endif %}

      tv_salon_programme: 
        friendly_name: TV salon programme
        value_template: >- 
            {% set media = states.media_player.tv_salon %}
            {% set apple_tv = states.media_player.apple_tv_sejour %}
            
            {% if media.state == "off" %}
            
            {% elif media.attributes.source == "Live TV" %}
              {{ media.attributes.media_title | default('N/A') }}
              
            {% elif media.attributes.source == "Apple OTT" %}
            
            {% set duree_verif = apple_tv.attributes.media_duration  %}
            {% set duree_media = states.sensor.tv_salon_duree_media.state  %}
            
              {% if apple_tv.state == 'playing' %}
              
                {% if duree_verif is defined  %}
                  {% set media_title = apple_tv.attributes.media_title  %}
                  {% set media_artist = apple_tv.attributes.media_artist  %}
                  {% if media_artist is defined %} 
                  {{ media_artist }} [{{ duree_media }}]{{ "<br>" }}{{ media_title }}
                  {% else %} 
                  [{{ duree_media }}] {{ media_title }} 
                  {% endif %}
                {% else %}
                  {% set media_title = apple_tv.attributes.media_title  %}
                  {% set media_artist = apple_tv.attributes.media_artist  %}                
                  {% if media_artist is defined %} 
                  {{ media_artist }} {{ "<br>" }}{{ media_title }}
                  {% else %} 
                  {{ media_title }} 
                  {% endif %}
                {% endif %}
                
              {% elif apple_tv.state != 'playing' %}
                Pause
              {% endif %}
            {% endif %}

      tv_salon_info: 
        friendly_name: TV salon info
        value_template: >- 
            {% set media = states.media_player.tv_salon %}
            {% set source = states.sensor.tv_salon_source.state %}
            {% set name = media.attributes.friendly_name %}
            
            {% if media.state == "off" %}
            {% elif media.attributes.source == "Live TV" %}
            {{ name }} : {{ media.attributes.media_title | default('Live TV') }}            
            {% else %}
            {{ name }} : {{ source | replace('Musique', 'Menu Apple TV') }}              
            {% endif %}
            
      tv_parents_source:
        friendly_name: TV parents source
        value_template: >-      
            {% set media = states.switch.tele_des_parents.state  %}
            {% if media == "on" %}           
            {% set app_id = states.media_player.apple_tv_parents.attributes.get('app_id', 'Apple TV')
               | replace('com.apple.TVAirPlay', 'AirPlay')
               | replace('com.google.ios.youtube', 'YouTube')
               | replace('com.plexapp.plex', 'Plex')
               | replace('com.amazon.aiv.AIVApp', 'Prime Video')
               | replace('tv.molotov.MolotovAppProd', 'Molotov')               
               | replace('com.netflix.Netflix', 'Netflix') %}
            {% set app_name = states.media_player.apple_tv_parents.attributes.app_name %}

            {% if app_name is defined  %}
              {{ app_name }} 
            {% else %}
              {{ app_id }}
            {% endif %}
            {% else %}
            {% endif %}

      tv_parents_vol:
        friendly_name: TV parents volume
        value_template: >-      
          {{ (state_attr('media_player.papa','volume_level') |float(0) *100)|round(0) }}


      apple_tv_parents_app_name: 
        friendly_name: Apple TV parents nome application
        value_template: >- 
            {%- if states.media_player.apple_tv_parents.attributes.app_name is defined -%}
              {{ states.media_player.apple_tv_parents.attributes.app_name }}
            {%- else -%}              
            {%- endif %}
          
      tv_parents_media_artist: 
        friendly_name: TV parents artiste média
        value_template: >- 
            {%- if states.media_player.apple_tv_parents.attributes.media_artist is defined -%}
              {{ states.media_player.apple_tv_parents.attributes.media_artist }}
            {%- else -%}              
            {%- endif %}
          
      tv_parents_position_media:
        friendly_name: TV parents durée média
        value_template: >-  
            {% if states.media_player.apple_tv_parents.attributes.media_position is defined %}
              {% set total_seconds = float(states.media_player.apple_tv_parents.attributes.media_position) %}
              {% set hours = total_seconds // 3600 %}
              {% set minutes = (total_seconds % 3600) // 60 %}
              {% set seconds = total_seconds % 60 %}
              {{ "%02d:%02d:%02d" | format(hours, minutes, seconds) }}
            {% else %}
            {% endif %} 
          
      tv_parents_duree_media:
        friendly_name: TV parents durée média
        value_template: >-  
            {% if states.media_player.apple_tv_parents.attributes.media_duration is defined %}
              {% set total_seconds = float(states.media_player.apple_tv_parents.attributes.media_duration) %}
              {% set hours = total_seconds // 3600 %}
              {% set minutes = (total_seconds % 3600) // 60 %}
              {{ "%02dh%02d" | format(hours, minutes) }}
            {% else %}
            {% endif %} 

      tv_parents_duree_restante:
        friendly_name: TV parents durée restante
        value_template: >-  
            {% if is_state('media_player.apple_tv_parents', 'playing') %}
              {% set total_minutes = ((float(states.media_player.apple_tv_parents.attributes.media_duration) / 60) - (float(states.media_player.apple_tv_parents.attributes.media_position) / 60)) | round(0) %}
              {% set hours = total_seconds // 3600 %}
              {% set minutes = (total_seconds % 3600) // 60 %}
              {% set seconds = total_seconds % 60 %}
              -{{ "%02d:%02d:%02d" | format(hours, minutes, seconds) }}
            {% else %}
            {% endif %}  
          
      tv_parents_duree_media_pourcentage:
        friendly_name: TV salon durée média
        value_template: >-      
            {% if states.media_player.apple_tv_parents.state == "playing" %}
              {{ (states.media_player.apple_tv_parents.attributes.media_position | default(0) * 100 / states.media_player.apple_tv_parents.attributes.media_duration | round(1)) | round(0)}}
            {% else %}
            {% endif %}


      tv_parents_programme: 
        friendly_name: TV parents programme
        value_template: >- 
            {% set media = states.switch.tele_des_parents %}
            {% set apple_tv = states.media_player.apple_tv_parents %}
            
            {% if media.state == "off" %}
                 
            {% elif apple_tv .state == 'playing' %}
            {% set duree_media = states.sensor.tv_parents_duree_media.state  %}
            
                {% if duree_media != "" and duree_media != "unavailable" %}
                  {% set media_title = apple_tv.attributes.media_title  %}
                  {% set media_artist = apple_tv.attributes.media_artist  %}
                  {% if media_artist is defined %} 
                  {{ media_artist }} ({{ duree_media }}){{ "<br>" }}{{ media_title }} 
                  {% else %} 
                  ({{ duree_media }}) {{ media_title }} 
                  {% endif %}
                {% else %}
                {% endif %}
                
              {% elif apple_tv.state != 'playing' %}
                Pause
            {% endif %}

      tv_parents_info: 
        friendly_name: TV parents info
        value_template: >- 
            {% set media = states.switch.tele_des_parents %}
            {% set source = states.sensor.tv_parents_source.state %}
            {% set name = media.attributes.friendly_name %}
            
            {% if media.state == "off" %}
            
            {% else %}
            {{ name }} : {{ source }}              
            {% endif %}
            
###### MUSIQUE

      musique_status:
        friendly_name: "État de la musique"
        value_template: >-
            {% set media_players = [
                states('media_player.sejour'),
                states('media_player.la_cuisine'),
                states('media_player.tom'),
                states('media_player.nina'),
                states('media_player.leane'),
                states('media_player.manon'),
                states('media_player.papa'),
                states('media_player.maman'),
                states('media_player.la_salle_de_bain'),
                states('media_player.le_garage')
            ] %}
            {% set playing_players = media_players | selectattr('state', 'eq', 'playing') | list %}
            {{ 'on' if playing_players | length > 0 else 'off' }}
          
          
      compteur_musique:
        friendly_name: Compteur Musique          
        value_template: >-
            {%- set entities = expand('group.echos') | selectattr('state', 'eq', 'playing') | map(attribute='name') | list -%}
            {{ entities | count }}

      musique:
        friendly_name: Musique          
        value_template: >
            {%- set entities = expand('group.echos') | selectattr('state', 'eq', 'playing') | map(attribute='name') | list -%}
            {{ entities | join(', ') if entities else 'Aucun' }} 
            

      compteur_echo_hs:
        friendly_name: Compteur echo indisponible          
        value_template: >-
          {%- set entities = expand('group.echos') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
          {{ entities | count }} 
            
      echo_hs:
        friendly_name: echo indisponible          
        value_template: >-
          {%- set entities = expand('group.echos') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
          {{ entities | join(', ')  }}

      musique_en_cours:
        friendly_name: Musique en cours         
        value_template: >-          
            {% set media_players = states.group.musique_en_cours.attributes.entity_id %}
            
            {% for entity_id in media_players -%}
              {% set player = states[entity_id] -%}
              {% if player and player.state == 'playing' and player.attributes.media_artist is defined and player.attributes.media_title is defined -%}
                {{ player.name }} : {{ player.attributes.media_artist }} "{{ player.attributes.media_title }}"{{ "<br>" }}
              {%- endif -%}
            {% endfor -%}

      sejour_progression:
        friendly_name: Séjour progression         
        value_template: >-
            {%- if states.media_player.sejour.attributes.media_position is defined and 
            states.media_player.sejour.attributes.media_duration is defined -%}
              {{ (((float(states.media_player.sejour.attributes.media_position) * 100) / 
              float(states.media_player.sejour.attributes.media_duration)) | round(1))| round(0) }}
            {%- else -%}
              0
            {%- endif %}
        unit_of_measurement: '%'
        
      cuisine_progression:
        friendly_name: Cuisine progression         
        value_template: >-
            {%- if states.media_player.la_cuisine.attributes.media_position is defined and 
            states.media_player.la_cuisine.attributes.media_duration is defined -%}
              {{ (((float(states.media_player.la_cuisine.attributes.media_position) * 100) / 
              float(states.media_player.la_cuisine.attributes.media_duration)) | round(1))| round(0) }}
            {%- else -%}
              0
            {%- endif %}
        unit_of_measurement: '%'        

      parents_progression:
        friendly_name: Parents progression         
        value_template: >-
            {%- if states.media_player.chambre_des_parents.attributes.media_position is defined and 
            states.media_player.chambre_des_parents.attributes.media_duration is defined -%}
              {{ (((float(states.media_player.chambre_des_parents.attributes.media_position) * 100) / 
              float(states.media_player.chambre_des_parents.attributes.media_duration)) | round(1))| round(0) }}
            {%- else -%}
              0
            {%- endif %}
        unit_of_measurement: '%' 
        
      salle_de_bain_progression:
        friendly_name: Salle de bain progression         
        value_template: >-
            {%- if states.media_player.la_salle_de_bain.attributes.media_position is defined and 
            states.media_player.la_salle_de_bain.attributes.media_duration is defined -%}
              {{ (((float(states.media_player.la_salle_de_bain.attributes.media_position) * 100) / 
              float(states.media_player.la_salle_de_bain.attributes.media_duration)) | round(1))| round(0) }}
            {%- else -%}
              0
            {%- endif %}
        unit_of_measurement: '%' 
        
      garage_progression:
        friendly_name: Garage progression         
        value_template: >-
            {%- if states.media_player.le_garage.attributes.media_position is defined and 
            states.media_player.le_garage.attributes.media_duration is defined -%}
              {{ (((float(states.media_player.le_garage.attributes.media_position) * 100) / 
              float(states.media_player.le_garage.attributes.media_duration)) | round(1))| round(0) }}
            {%- else -%}
              0
            {%- endif %}
        unit_of_measurement: '%'

      tom_progression:
        friendly_name: Tom progression         
        value_template: >-
            {%- if states.media_player.tom.attributes.media_position is defined and 
            states.media_player.tom.attributes.media_duration is defined -%}
              {{ (((float(states.media_player.tom.attributes.media_position) * 100) / 
              float(states.media_player.tom.attributes.media_duration)) | round(1))| round(0) }}
            {%- else -%}
              0
            {%- endif %}
        unit_of_measurement: '%'

      manon_progression:
        friendly_name: Manon progression         
        value_template: >-
            {%- if states.media_player.manon.attributes.media_position is defined and 
            states.media_player.manon.attributes.media_duration is defined -%}
              {{ (((float(states.media_player.manon.attributes.media_position) * 100) / 
              float(states.media_player.manon.attributes.media_duration)) | round(1))| round(0) }}
            {%- else -%}
              0
            {%- endif %}
        unit_of_measurement: '%'
        
      leane_progression:
        friendly_name: Léane progression         
        value_template: >-
            {%- if states.media_player.leane.attributes.media_position is defined and 
            states.media_player.leane.attributes.media_duration is defined -%}
              {{ (((float(states.media_player.leane.attributes.media_position) * 100) / 
              float(states.media_player.leane.attributes.media_duration)) | round(1))| round(0) }}
            {%- else -%}
              0
            {%- endif %}
        unit_of_measurement: '%'    
        
      nina_progression:
        friendly_name: Nina progression         
        value_template: >-
            {%- if states.media_player.nina.attributes.media_position is defined and 
            states.media_player.nina.attributes.media_duration is defined -%}
              {{ (((float(states.media_player.nina.attributes.media_position) * 100) / 
              float(states.media_player.nina.attributes.media_duration)) | round(1))| round(0) }}
            {%- else -%}
              0
            {%- endif %}
        unit_of_measurement: '%'  
        
      manon_et_leane_progression:
        friendly_name: Manon et Léane progression         
        value_template: >-
            {%- if states.media_player.chambre_de_manon_et_leane.attributes.media_position is defined and 
            states.media_player.chambre_de_manon_et_leane.attributes.media_duration is defined -%}
              {{ (((float(states.media_player.chambre_de_manon_et_leane.attributes.media_position) * 100) / 
              float(states.media_player.chambre_de_manon_et_leane.attributes.media_duration)) | round(1))| round(0) }}
            {%- else -%}
              0
            {%- endif %}
        unit_of_measurement: '%' 
        
      partout_progression:
        friendly_name: Partout progression         
        value_template: >-
            {%- if states.media_player.partout.attributes.media_position is defined and 
            states.media_player.partout.attributes.media_duration is defined -%}
              {{ (((float(states.media_player.partout.attributes.media_position) * 100) / 
              float(states.media_player.partout.attributes.media_duration)) | round(1))| round(0) }}
            {%- else -%}
              0
            {%- endif %}
        unit_of_measurement: '%' 
        
      en_bas_progression:
        friendly_name: En bas progression         
        value_template: >-
            {%- if states.media_player.en_bas.attributes.media_position is defined and 
            states.media_player.en_bas.attributes.media_duration is defined -%}
              {{ (((float(states.media_player.en_bas.attributes.media_position) * 100) / 
              float(states.media_player.en_bas.attributes.media_duration)) | round(1))| round(0) }}
            {%- else -%}
              0
            {%- endif %}
        unit_of_measurement: '%' 
        
      etage_progression:
        friendly_name: Etage progression         
        value_template: >-
            {%- if states.media_player.etage.attributes.media_position is defined and 
            states.media_player.etage.attributes.media_duration is defined -%}
              {{ (((float(states.media_player.etage.attributes.media_position) * 100) / 
              float(states.media_player.etage.attributes.media_duration)) | round(1))| round(0) }}
            {%- else -%}
              0
            {%- endif %}
        unit_of_measurement: '%'
        
###### MACHINES 
          
      lave_vaisselle:
        friendly_name: lave-vaisselle 
        value_template: >-   
            {% if states.sensor.lave_vaisselle_operation_state.state == "Run" %}
              {% if states.sensor.lave_vaisselle_remaining_program_time.state != "unavailable" %}
                Fin: {{ as_timestamp(states('sensor.lave_vaisselle_remaining_program_time')) | timestamp_custom('%-Hh%M ', 'true') }}
              {% else %}
                Fin: ...
              {% endif %}
            {% elif states.sensor.lave_vaisselle_operation_state.state == "Finished" %}
              Fini
            {% elif states.sensor.lave_vaisselle_operation_state.state == "Ready" %}
              Prêt
            {% else %}
              ...
            {% endif %}
 
          
      lave_vaisselle_duree:
        friendly_name: lave-vaisselle durée
        value_template: >-   
            {%- if states('sensor.lave_vaisselle_remaining_program_time') != 'unavailable' -%}
              {{ as_timestamp(states('sensor.lave_vaisselle_remaining_program_time')) | timestamp_custom('%-Hh%M ', 'true') }}
            {%- else -%}
            {%- endif %}

      lave_vaisselle_termine:
        friendly_name: lave-vaisselle terminé depuis
        value_template: >-  
          {%- set time = (as_timestamp(now()) - as_timestamp(states.sensor.lave_vaisselle_program_progress.last_changed)) | int  %}
          {%- set minutes = ((time % 3600) // 60) %}
          {%- set minutes = '{}min'.format(minutes)  if minutes > 0 else '' %}
          {%- set hours = ((time % 86400) // 3600) %}
          {%- set hours = '{}h'.format(hours)  if hours > 0 else '' %}
          {%- set days = (time // 86400) %}
          {%- set days = '{}j'.format(days)  if days > 0 else '' %}
          {{ 'Depuis - de 1min' if time < 60 else 'Depuis ' + days + hours + minutes }}

          
      lave_linge_duree:
        friendly_name: lave-linge durée
        value_template: >-   
          {% if states.input_select.lave_linge.state == 'on' %}
            {{ as_timestamp(states.input_select.lave_linge.last_changed) | timestamp_custom("%Hh%M") }}  
          {% elif states.input_select.lave_linge.state == 'veille' %}
            {{ as_timestamp(states.input_select.lave_linge.last_changed) | timestamp_custom("%Hh%M") }} 
          {%- else %}
          {%- endif %}

      seche_linge_duree:
        friendly_name: seche-linge durée
        value_template: >-   
          {% if states.input_boolean.seche_linge.state == 'on' %}
            {{ as_timestamp(states.input_boolean.seche_linge.last_changed) | timestamp_custom("%Hh%M") }}  
          {%- else %}
          {%- endif %}

      compteur_machines:
        friendly_name: Compteur machines a laver          
        value_template: >-
            {{states                                  
            | reject('in', ['undefined', 'unavailable'])
            | selectattr('entity_id', 'in', state_attr('group.machines', 'entity_id'))|selectattr('state', 'equalto', 'on')
            | map(attribute='name') | list | count}} 
            
###### TROTTINETTE

      trottinette_tom_charge_duree:
        friendly_name: trottinette Tom en charge depuis depuis
        value_template: >- 
          {%- set time = (as_timestamp(now()) - as_timestamp(states.switch.trottinette.last_changed)) | int  %}
          {%- set minutes = ((time % 3600) // 60) %}
          {%- set minutes = '{}min'.format(minutes)  if minutes > 0 else '' %}
          {%- set hours = ((time % 86400) // 3600) %}
          {%- set hours = '{}h'.format(hours)  if hours > 0 else '' %}
          {%- set days = (time // 86400) %}
          {%- set days = '{}j'.format(days)  if days > 0 else '' %}
          {{ 'depuis - de 1min' if time < 60 else 'depuis ' + days + hours + minutes }}
          
###### ASPIS

      walle_state:
        friendly_name: walle state 
        value_template: >- 
            {% set vacuum_state = states('vacuum.wall_e') %}
            {% set mop_attached = is_state("binary_sensor.wall_e_mop_attached", "on") %}
            
            {% set translations = {'unavailable': 'Indisponible', 'cleaning': 'Nettoyage', 'returning': 'Retour', 'error': 'ERREUR', 'idle': 'Pause', 'paused': 'Pause', 'docked': 'Base'} %}
            
            {% if vacuum_state == 'cleaning' and mop_attached -%}
            Serpillère
            {%- else %}
            {{ translations.get(vacuum_state, vacuum_state) }}
            {%- endif %}  
              
      r2d2_state:
        friendly_name: r2d2 state 
        value_template: >- 
            {% set vacuum_state = states('vacuum.r2d2') %}
            {% set mop_attached = is_state("binary_sensor.r2d2_mop_attached", "on") %}
            
            {% set translations = {'unavailable': 'Indisponible', 'cleaning': 'Nettoyage', 'returning': 'Retour', 'error': 'ERREUR', 'idle': 'Pause', 'paused': 'Pause', 'docked': 'Base'} %}
            
            {% if vacuum_state == 'cleaning' and mop_attached -%}
            Serpillère
            {%- else %}
            {{ translations.get(vacuum_state, vacuum_state) }}
            {%- endif %}         

      aspi_info:
        friendly_name: Aspis info
        value_template: >- 
            {% set walle_state = states('vacuum.wall_e') %}
            {% set walle_mop_attached = is_state("binary_sensor.wall_e_mop_attached", "on") %}
            {% set r2d2_state = states('vacuum.r2d2') %}
            {% set r2d2_mop_attached = is_state("binary_sensor.r2d2_mop_attached", "on") %}
            
            {% set translations = {'unavailable': 'Indisponible', 'cleaning': 'Nettoyage', 'returning': 'Retour', 'error': 'ERREUR', 'idle': 'Pause', 'paused': 'Pause', 'docked': 'Base'} %}

            {% if walle_state == 'docked' -%}
            {% elif walle_state == 'cleaning' and walle_mop_attached %}
            Wall-E : Serpillère
            {%- else %}
            Wall-E : {{ translations.get(walle_state, walle_state) }}
            {% endif %} {% if walle_state != 'docked' and r2d2_state != 'docked' -%}{{ ", " }}{% endif %} 

            {% if r2d2_state == 'docked' -%}
            
            {% elif r2d2_state == 'cleaning' and r2d2_mop_attached %}
            R2-D2 : Serpillère
            {%- else %}
            R2-D2 : {{ translations.get(r2d2_state, r2d2_state) }}
            {% endif %}
            
      walle_batterie:
        friendly_name: "Wall-E batterie"
        value_template: "{{ states.vacuum.wall_e.attributes.battery_level | default('0')}}"
          
      r2d2_batterie:
        friendly_name: "r2d2 batterie"
        value_template: "{{ states.vacuum.r2d2.attributes.battery_level | default('0') }}"
        
      walle_erreur:
        friendly_name: Wall-E message d'erreur
        value_template: >-      
          {% set walle_error = state_attr('vacuum.wall_e' , 'error') 
                | replace('Dust collector missing', 'Bac à poussières non installé')
                | replace('Laser distance sensor error', 'Erreur du capteur laser. Essayez de tourner la tête du laser.')
                | replace('Device stuck, clean area', 'coincé ou bloqué ! Retirez les obstacles')
                | replace('Docking station not reachable', 'Impossible d atteindre la station de charge')
                | replace('Wheels on top of void, move robot', 'Roues suspendues, déplacez le robot')
                | replace('Charging fault', 'Impossible de charger correctement, assurez-vous que les surfaces de chargements sont propres')
                | replace('Clean hovering sensors, move robot', 'Problème avec les capteurs de dénivelé : nettoyez les détecteurs de dénivelé, éloignez le robot, et redémarrez-le.') %} 
          {% if is_state("vacuum.wall_e", "error") -%}
            Wall-E : {{ walle_error }}
          {%- else -%}
          {%- endif %}
              
      r2d2_erreur:
        friendly_name: r2d2 message d'erreur
        value_template: >-      
          {% set r2d2_error = state_attr('vacuum.r2d2' , 'error') 
                | replace('Dust collector missing', 'Bac à poussières non installé')
                | replace('Laser distance sensor error', 'Erreur du capteur laser. Essayez de tourner la tête du laser.')
                | replace('Device stuck, clean area', 'coincé ou bloqué ! Retirez les obstacles')
                | replace('Docking station not reachable', 'Impossible d atteindre la station de charge')
                | replace('Wheels on top of void, move robot', 'Roues suspendues, déplacez le robot')
                | replace('Charging fault', 'Impossible de charger correctement, assurez-vous que les surfaces de chargements sont propres')
                | replace('Clean hovering sensors, move robot', 'Problème avec les capteurs de dénivelé : nettoyez les détecteurs de dénivelé, éloignez le robot, et redémarrez-le.') %} 
          {% if is_state("vacuum.r2d2", "error") -%}
            R2D2 : {{ r2d2_error }}
          {%- else -%}
          {%- endif %}

      compteur_aspi:
        friendly_name: Compteur aspi           
        value_template: >-
            {%- set entities = expand('group.aspis') | selectattr('state', 'eq', 'cleaning') | map(attribute='name') | list -%}
            {{ entities | count }}
           
      compteur_aspi_hs:
        friendly_name: Compteur aspi indisponible          
        value_template: >-
          {%- set entities = expand('group.aspis') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
          {{ entities | count }} 
           
      aspi_hs:
        friendly_name: aspi indisponible          
        value_template: >-
          {%- set entities = expand('group.aspis') | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='name') | list -%}
          {{ entities | join(', ') }} 
              
      aspi_mode_vacances:
        friendly_name: passage aspi en mode vacances          
        value_template: >-
          {% set aspi = as_timestamp(states.schedule.mode_absent_calendrier_aspi.attributes.next_event) | timestamp_custom("%A %d/%m à %Hh%M")
            | replace('Monday', 'Lundi')
            | replace('Tuesday', 'Mardi')
            | replace('Wednesday', 'Mercredi')
            | replace('Thursday', 'Jeudi')
            | replace('Friday', 'Vendredi')
            | replace('Saturday', 'Samedi')
            | replace('Sunday', 'Dimanche') %}
          {{ aspi }}
          
###### SURVEILLANCE SYSTEME   

      verif_avertissement:
        friendly_name: Verif des avertissements
        value_template: >-
            {%- set systeme = is_state('sensor.systeme_avertissement', 'OK') -%}
            {%- set rpi = is_state('sensor.avertissement_rpi', 'OK') -%}
            {%- set plantes = is_state('sensor.avertissement_humidite_plantes', 'OK') -%}
            {%- set spook = is_state('sensor.spook', 'false') -%}
            {%- set fuite = is_state('sensor.fuites_eau', 'OK') -%}
            {%- set batterie = is_state('sensor.batterie_faible', 'Aucune') -%}
            {%- set lock = is_state('sensor.serrures_bloquees', 'OK') -%}  
            {%- set walle = not is_state('vacuum.wall_e', 'error') -%}
            {%- set r2d2 = not is_state('vacuum.r2d2', 'error') -%}  
            
            {%- if systeme and rpi and plantes and spook and fuite and batterie and lock and walle and r2d2 -%}
              true
            {%- else %}
              false
            {%- endif -%}

      systeme_avertissement:
        friendly_name: Surveillance système
        value_template: >-
            {%- set messages = [] -%}
        
            {%- set compteur = states('sensor.compteur_serrures_hs') | int(0) -%}
            {%- set sensor = states('sensor.serrures_hs')  -%}
            {% set current_time = as_timestamp(now()) %}
            {% set last_changed = as_timestamp(states.sensor.compteur_serrures_hs.last_changed) %}
            {%- if compteur > 1 and (current_time - last_changed > 600) -%}
              {%- set messages = messages + [compteur ~ ' Serrures : ' ~ sensor] -%}
            {%- elif compteur == 1 and (current_time - last_changed > 600) -%}
              {%- set messages = messages + ['Serrure : ' ~ sensor] -%}
            {%- endif -%}
        
            {%- if not states('sensor.pronote_hs') %} 
            {%- else -%}
              {%- set messages = messages + ['Pronote : ' ~ states.sensor.pronote_hs.state] -%}
            {%- endif -%}
        
            {%- set compteur = states('sensor.compteur_plante_hs') | int(0) -%}
            {%- set sensor = states('sensor.plante_hs')  -%}
            {%- if compteur > 1 -%}
              {%- set messages = messages + [compteur ~ ' Plantes : ' ~ sensor] -%}
            {%- elif compteur == 1 -%}
              {%- set messages = messages + ['Plante : ' ~ sensor] -%}
            {%- endif -%}
        
            {%- set compteur = states('sensor.compteur_lumieres_hs') | int(0) -%}
            {%- set sensor = states('sensor.lumiere_hs')  -%}
            {%- if compteur > 1 -%}
              {%- set messages = messages + [compteur ~ ' Lumières : ' ~ sensor] -%}
            {%- elif compteur == 1 -%}
              {%- set messages = messages + ['Lumière : ' ~ sensor] -%}
            {%- endif -%}
        
            {%- if is_state('input_boolean.noel', 'off')  %}  
            {%- else -%}
              {%- if not states('sensor.noel_hs') -%}
              {%- else -%}
                {%- set messages = messages + ['Noël : ' ~ states.sensor.noel_hs.state] -%}
              {%- endif -%}
            {%- endif -%}
        
            {%- set compteur = states('sensor.compteur_porte_hs') | int(0) -%}
            {%- set sensor = states('sensor.porte_hs')  -%}
            {%- if compteur > 1 -%}
              {%- set messages = messages + [compteur ~ ' Portes : ' ~ sensor] -%}
            {%- elif compteur == 1 -%}
              {%- set messages = messages + ['Porte : ' ~ sensor] -%}
            {%- endif -%}
        
            {%- set compteur = states('sensor.compteur_mouv_hs') | int(0) -%}
            {%- set sensor = states('sensor.mouv_hs')  -%}
            {%- if compteur > 1 -%}
              {%- set messages = messages + [compteur ~ ' Mouvements : ' ~ sensor] -%}
            {%- elif compteur == 1 -%}
              {%- set messages = messages + ['Mouvement : ' ~ sensor] -%}
            {%- endif -%}
        
            {%- if not states('sensor.tv_hs') %} 
            {%- else -%}
              {%- set messages = messages + ['TV : ' ~ states.sensor.tv_hs.state] -%}
            {%- endif -%} 
        
            {%- if not states('sensor.apple_tv_hs') %} 
            {%- else -%}
              {%- set messages = messages + ['Apple TV : ' ~ states.sensor.apple_tv_hs.state] -%}
            {%- endif -%} 
        
            {%- if not states('sensor.moustique_hs') %} 
            {%- else -%}
              {%- set messages = messages + ['Anti-moustiques : ' ~ states.sensor.moustique_hs.state] -%}
            {%- endif -%}
        
            {%- if not states('sensor.zigbee_hs') %} 
            {%- else -%}
              {%- set messages = messages + ['Zigbee : ' ~ states.sensor.zigbee_hs.state] -%}
            {%- endif -%}
        
            {%- set compteur = states('sensor.compteur_echo_hs') | int(0) -%}
            {%- set sensor = states('sensor.echo_hs')  -%}
            {%- if compteur > 1 -%}
              {%- set messages = messages + [compteur ~ ' Echos : ' ~ sensor] -%}
            {%- elif compteur == 1 -%}
              {%- set messages = messages + ['Echo : ' ~ sensor] -%}
            {%- endif -%}
        
            {%- set compteur = states('sensor.compteur_thermo_hs') | int(0) -%}
            {%- set sensor = states('sensor.thermo_hs')  -%}
            {%- if compteur > 1 -%}
              {%- set messages = messages + [compteur ~ ' Thermos : ' ~ sensor] -%}
            {%- elif compteur == 1 -%}
              {%- set messages = messages + ['Thermo : ' ~ sensor] -%}
            {%- endif -%}
        
            {%- set compteur = states('sensor.compteur_aspi_hs') | int(0) -%}
            {%- set sensor = states('sensor.aspi_hs')  -%}
            {%- if compteur > 1 -%}
              {%- set messages = messages + [compteur ~ ' Aspis : ' ~ sensor] -%}
            {%- elif compteur == 1 -%}
              {%- set messages = messages + ['Aspi : ' ~ sensor] -%}
            {%- endif -%}
        
            {%- set compteur = states('sensor.compteur_inter_hs') | int(0) -%}
            {%- set sensor = states('sensor.inter_hs')  -%}
            {%- if compteur > 1 -%}
              {%- set messages = messages + [compteur ~ ' Interrupteurs : ' ~ sensor] -%}
            {%- elif compteur == 1 -%}
              {%- set messages = messages + ['Interrupteur : ' ~ sensor] -%}
            {%- endif -%}      
        
            {%- if is_state('binary_sensor.presence_sejour_fp2', 'unavailable') -%}
              {%- set messages = messages + ['Présence FP2'] -%}
            {%- endif -%}
        
            {%- if is_state('device_tracker.arlo_sonnette', 'not_home') -%}
              {%- set messages = messages + ['Sonnette'] -%}
            {%- endif -%}
        
            {%- if states('switch.lave_vaisselle_power') == 'unavailable' or 
              states('binary_sensor.lave_vaisselle_door') == 'unavailable' -%}
              {%- set messages = messages + ['Lave-vaisselle'] -%}
            {%- endif -%}
        
            {%- if messages %}
              {{ messages | join('<br>') }}
            {%- else %}
              OK
            {%- endif %}


      fuites_eau: 
        friendly_name: Surveillance fuites d'eau
        value_template: >- 
              {% if is_state("binary_sensor.fuites_d_eau_water_leak", "on") -%}
                Fuite détectée dans le garage !<br>
                {%- else -%}
                OK
              {%- endif %}
              
      erreur_aspi: 
        friendly_name: Surveillance erreur aspi
        value_template: >-
          {% set walle_error = state_attr('vacuum.wall_e' , 'error') 
                | replace('Dust collector missing', 'Bac à poussières non installé')
                | replace('Laser distance sensor error', 'Erreur du capteur laser. Essayez de tourner la tête du laser.')
                | replace('Device stuck, clean area', 'coincé ou bloqué ! Retirez les obstacles')
                | replace('Docking station not reachable', 'Impossible d atteindre la station de charge')
                | replace('Wheels on top of void, move robot', 'Roues suspendues, déplacez le robot')
                | replace('Charging fault', 'Impossible de charger correctement, assurez-vous que les surfaces de chargements sont propres')
                | replace('Clean hovering sensors, move robot', 'Problème avec les capteurs de dénivelé : nettoyez les détecteurs de dénivelé, éloignez le robot, et redémarrez-le.') %} 
          {% if is_state("vacuum.wall_e", "error") -%}
            Wall-E : {{ walle_error }}
          {%- else -%}
          {%- endif %}  
              
          {% set r2d2_error = state_attr('vacuum.r2d2' , 'error') 
                | replace('Dust collector missing', 'Bac à poussières non installé')
                | replace('Laser distance sensor error', 'Erreur du capteur laser. Essayez de tourner la tête du laser.')
                | replace('Device stuck, clean area', 'coincé ou bloqué ! Retirez les obstacles')
                | replace('Docking station not reachable', 'Impossible d atteindre la station de charge')
                | replace('Wheels on top of void, move robot', 'Roues suspendues, déplacez le robot')
                | replace('Charging fault', 'Impossible de charger correctement, assurez-vous que les surfaces de chargements sont propres')
                | replace('Clean hovering sensors, move robot', 'Problème avec les capteurs de dénivelé : nettoyez les détecteurs de dénivelé, éloignez le robot, et redémarrez-le.') %} 
          {% if is_state("vacuum.r2d2", "error") -%}
            R2-D2 : {{ r2d2_error }}
          {%- else -%}
          {%- endif %}
              
          
      batterie_faible:
        friendly_name: Surveillance batteries et piles
        value_template: >-                
            {% set low_battery_entities = states.sensor
              | selectattr('attributes.device_class', 'defined')
              | selectattr('attributes.device_class', 'eq', 'battery')
              | rejectattr('state', 'in', ['unavailable', 'unknown', '100'])
              | rejectattr('state', 'ge', '20')
              | map(attribute='name') | list %}
            {% if low_battery_entities %}
              {{ low_battery_entities | join(', ') }}
            {% else %}
              Aucune
            {% endif %}


      avertissement_rpi:
        friendly_name: Surveillance rpi
        value_template: >-
            {%- set messages = [] -%}
        
            {%- set ssd = states('sensor.disk_use_percent_config') | float(0)-%}
            {%- set temp = states('sensor.cpu_temperature') | float(0)-%}
            {%- set ram = states('sensor.memory_use_percent') | float(0)-%} 
            {%- set cpu = states('sensor.processor_use_percent') | float(0)-%}
            {%- set max = 70 -%}
            
            {%- if ssd < 40 %} 
            {%- else -%}
              {%- set messages = messages + ['SSD : ' ~ states.sensor.disk_use_percent_config.state ~' %' ] -%}
            {%- endif -%}

            {%- if temp < max %} 
            {%- else -%}
              {%- set messages = messages + ['Température : ' ~ states.sensor.cpu_temperature.state ~' °C' ] -%}
            {%- endif -%}

            {%- if ram < max %} 
            {%- else -%}
              {%- set messages = messages + ['Mémoire : ' ~ states.sensor.memory_use_percent.state ~' %' ] -%}
            {%- endif -%}
            
            {%- if cpu < max %} 
            {%- else -%}
              {%- set messages = messages + ['Processeur : ' ~ states.sensor.processor_use_percent.state ~' %' ] -%}
            {%- endif -%}
            
            {%- if messages %}
              {{ messages | join('<br>') }}
            {%- else %}
              OK
            {%- endif %}

      avertissement_humidite_plantes:
        friendly_name: Surveillance humidité des plantes
        value_template: >-  
            {%- set messages = [] -%}
            
            {%- set citro_state = states('sensor.plante_citro_humidite') -%}
            {%- if citro_state not in ['unavailable', 'unknown'] -%}
              {%- set citro = citro_state | float(0) -%}
              {%- if citro > 1 %} 
              {%- else -%}
                {%- set messages = messages + ['Citronnier (' ~ citro ~' %)' ] -%}
              {%- endif -%}
            {%- endif -%}
            
            {%- set eleph_state = states('sensor.plante_hum_pied_elephant') -%}
            {%- if eleph_state not in ['unavailable', 'unknown'] -%}
              {%- set eleph = eleph_state | float(0) -%}
              {%- if eleph > 0.5 %} 
              {%- else -%}
                {%- set messages = messages + ["Pied d'Eléphant (" ~ eleph ~' %)' ] -%}
              {%- endif -%}
            {%- endif -%}
            
            {%- set draca_state = states('sensor.plante_hum_dracaena') -%}
            {%- if draca_state not in ['unavailable', 'unknown'] -%}
              {%- set draca = draca_state | float(0) -%}
              {%- if draca > 1 %} 
              {%- else -%}
                {%- set messages = messages + ['Dracaena (' ~ draca ~' %)' ] -%}
              {%- endif -%}
            {%- endif -%}
            
            {%- if messages %}
              Manque d'eau : {{ messages | join(', ') }}
            {%- else %}
              OK
            {%- endif %}
       
        
###### MISE A JOUR HACS ET SUPERVISOR
          
      maj:
        friendly_name: Mise à jour 
        value_template: >-           
            {% set hacs_state = states('sensor.hacs') | float(0) %}
            {% set ha_versions_update = states('binary_sensor.home_assistant_versions_update_available') %}
            {% set ha_os_update = states('update.home_assistant_operating_system_update') %}
            {% set ha_supervisor_update = states('update.home_assistant_supervisor_update') %}
            
            {%- if hacs_state < 1 and ha_versions_update == 'off' and ha_os_update == 'off' and ha_supervisor_update == 'off' %}
              Aucune mise à jour
            {%- elif hacs_state > 0 or ha_versions_update == 'on' or ha_os_update == 'on' or ha_supervisor_update == 'on' %}
              {%- if ha_versions_update == 'on' %}
                HA Core [{{ states('sensor.home_assistant_versions') }}]<br>
              {%- endif %}
              {%- if ha_supervisor_update == 'on' %}
                HA Supervisor [{{ state_attr('update.home_assistant_supervisor_update', 'latest_version') }}]<br>
              {%- endif %}
              {%- if ha_os_update == 'on' %}
                HassOS [{{ states('sensor.home_assistant_operating_system_newest_version') }}]<br>
              {%- endif %}
              {%- if hacs_state > 0 %}
                {% for repo in states.sensor.hacs.attributes.repositories %}
                  {{ repo.display_name }} [{{ repo.available_version }}]<br>
                {% endfor %}
              {%- endif %}
            {%- endif %}


          
###### PERSONNES PRESENTES
          
      compteur_home:
        friendly_name: Compteur Personnes à la maison         
        value_template: >-
            {%- set entities = expand('group.person') | selectattr('state', 'eq', 'home') | map(attribute='name') | list -%}
            {{ entities | count }}

      presents:
        friendly_name: Personnes à la maison         
        value_template: >-
            {%- set entities = expand('group.person') | selectattr('state', 'eq', 'home') | map(attribute='name') | list -%}
            {{ entities | join(', ') if entities else 'Personne' }}        
         
###### STATUT PERSON AND GPS POSITION

      alex_trajet:
        friendly_name: "Alex tps trajet"
        value_template: >-
            {% set person = states.person.alex.state %}
            {% if person == "home" %}
              {{ states.sensor.alex_trajet_travail.state }}
            {% else %}       
              {{ states.sensor.alex_trajet_domicile.state }}
            {% endif %}  

      aurel_trajet:
        friendly_name: "Aurel tps trajet"
        value_template: >-
            {% set person = states.person.herve.state %}
            {% if person == "home" %}
              {{ states.sensor.aurel_trajet_travail.state }}
            {% else %}       
              {{ states.sensor.aurel_trajet_domicile.state }}
            {% endif %}  


          
      aurel_activite:
        friendly_name: Aurel activité          
        value_template: >-
            {% set activite = states('sensor.iphone_aurel_activity') %}
            {% set traduction = {'Unknown':'Mouvement', 'Stationary':'Stationnaire', 'Automotive':'Conduite', 'Walking':'Marche', 'Running':'Course', 'Cycling':'Vélo'} %}
            
            {{ traduction[activite] if activite in traduction.keys() else 'Inconnu' }}

          
      alex_activite:
        friendly_name: Alex activité          
        value_template: >-
            {% set activite = states('sensor.iphone_alex_activity') %}
            {% set traduction = {'Unknown':'Mouvement', 'Stationary':'Stationnaire', 'Automotive':'Conduite', 'Walking':'Marche', 'Running':'Course', 'Cycling':'Vélo'} %}
            
            {{ traduction[activite] if activite in traduction.keys() else 'Inconnu' }}

          
      alex_gps:
        friendly_name: Alex GPS 
        value_template: >-      
            {%- set alex_state = states.person.alex.state -%}
            
            {%- set location = states.sensor.iphone_alex_geocoded_location.attributes -%}
            
            {%- if alex_state == "home" -%}
              Maison
            {%- elif alex_state == "not_home" and location -%}
              {{ location.Name }} {{ state_attr('sensor.iphone_alex_geocoded_location', 'Postal Code') }} {{ location.Locality }}
            {%- else -%}
              {{ alex_state | default("Inconnu") }}
            {%- endif -%}


      alex_gps_simple:
        friendly_name: Alex GPS 
        value_template: >-      
          {% if states.person.alex.state == "home" %}
            Maison           
          {% elif states.person.alex.state == "not_home" %}
            {{ states.sensor.iphone_alex_geocoded_location.attributes.Locality }}
          {%- else -%}
            {{ states.person.alex.state }}
          {%- endif %}
          
      alex_gps_alexa:
        friendly_name: Alex GPS Alexa
        value_template: >-      
            {% set state_map = {
              'home': 'A la maison',
              'Travail': 'Au travail',
              'Hopital': 'A l\'hôpital',
              'Salle de sport': 'A la salle de sport',
              'Collège': 'Au collège',
              'Lycée': 'Au lycée',
              'Complexe sportif': 'Au complexe sportif',
              'Atoll': 'A Atoll',
              'Super U': 'A Super U',
              'not_home': 'à ' ~ states.sensor.iphone_alex_geocoded_location.attributes.Locality ~ ', ' ~ states.sensor.iphone_alex_geocoded_location.attributes.Thoroughfare,
              'default': 'Absente'
            } %}
            
            {{ state_map.get(states.person.alex.state, state_map['default']) }}
                     

      aurel_gps:
        friendly_name: Aurel GPS
        value_template: >-      
            {%- set aurel_state = states.person.herve.state -%}
            
            {%- set location = states.sensor.iphone_aurel_geocoded_location.attributes -%}
            
            {%- if aurel_state == "home" -%}
              Maison
            {%- elif aurel_state == "not_home" and location -%}
              {{ location.Name }} {{ state_attr('sensor.iphone_aurel_geocoded_location', 'Postal Code') }} {{ location.Locality }}
            {%- else -%}
              {{ aurel_state | default("Inconnu") }}
            {%- endif -%}
    
 
      aurel_gps_simple:
        friendly_name: Aurel GPS
        value_template: >-      
          {% if states.person.herve.state == "home" %}
            Maison
          {% elif states.person.herve.state == "not_home" %}
            {{ states.sensor.iphone_aurel_geocoded_location.attributes.Locality }}
          {%- else -%}
            {{ states.person.herve.state }}
          {%- endif %}
          
      tom_gps:
        friendly_name: Tom GPS
        value_template: >-      
            {% if states.person.tom.state == "home" %}
              Maison
            {% elif states.person.tom.state == "not_home" %}
              Absent              
            {% else %}
              {{ states.person.tom.state }}
            {% endif %}          
          
      tom_iphone_battery_state:    
        friendly_name: Tom état de la batterie de l'iPhone
        value_template: >-      
          {{ (states.sensor.iphone_tom_batterie_apple.attributes.battery_status)  }} 

      manon_iphone_battery_state:    
        friendly_name: Manon état de la batterie de l'iPhone
        value_template: >-      
          {{ (states.sensor.iphone_manon_batterie_apple.attributes.battery_status)  }} 
          
      aurel_duree:
        friendly_name: "Aurel duree"  
        value_template: >-        
          {%- set time = (as_timestamp(now()) - as_timestamp(states.person.herve.last_changed)) | int  %}
          {%- set minutes = ((time % 3600) // 60) %}
          {%- set minutes = '{}min'.format(minutes) if minutes > 0 else '0min' %}
          {%- set hours = ((time % 86400) // 3600) %}
          {%- set hours = '{}h '.format(hours) if hours > 0 else '0h ' %}
          {%- set days = (time // 86400) %}
          {%- set days = '{}j '.format(days) if days > 0 else '' %}
          {%- if time < 60 %}
          - de 1min 
          {%- elif time > 86400 %}
          {{ days + hours }}
          {%- else -%}
          {{ days + hours + minutes}}
          {%- endif -%}
          
      alex_duree:
        friendly_name: "Alex duree"
        value_template: >-
          {%- set time = (as_timestamp(now()) - as_timestamp(states.person.alex.last_changed)) | int  %}
          {%- set minutes = ((time % 3600) // 60) %}
          {%- set minutes = '{}min'.format(minutes) if minutes > 0 else '0min' %}
          {%- set hours = ((time % 86400) // 3600) %}
          {%- set hours = '{}h '.format(hours) if hours > 0 else '0h ' %}
          {%- set days = (time // 86400) %}
          {%- set days = '{}j '.format(days) if days > 0 else '' %}
          {%- if time < 60 %}
          - de 1min 
          {%- elif time > 86400 %}
          {{ days + hours }}
          {%- else -%}
          {{ days + hours + minutes}}
          {%- endif -%}
          
      tom_duree:
        friendly_name: "tom duree"
        value_template: >-
          {%- set time = (as_timestamp(now()) - as_timestamp(states.person.tom.last_changed)) | int  %}
          {%- set minutes = ((time % 3600) // 60) %}
          {%- set minutes = '{}min'.format(minutes) if minutes > 0 else '0min' %}
          {%- set hours = ((time % 86400) // 3600) %}
          {%- set hours = '{}h '.format(hours) if hours > 0 else '0h ' %}
          {%- set days = (time // 86400) %}
          {%- set days = '{}j '.format(days) if days > 0 else '' %}
          {%- if time < 60 %}
          - de 1min 
          {%- elif time > 86400 %}
          {{ days + hours }}
          {%- else -%}
          {{ days + hours + minutes}}
          {%- endif -%}
          
      manon_gps:
        friendly_name: Manon GPS
        value_template: >-      
            {% if states.person.manon.state == "home" %}
              Maison
            {% elif states.person.manon.state == "not_home" %}
              Absent              
            {% else %}
              {{ states.person.manon.state }}
            {% endif %}
          
      manon_duree:
        friendly_name: "manon duree"
        value_template: >-
          {%- set time = (as_timestamp(now()) - as_timestamp(states.person.manon.last_changed)) | int  %}
          {%- set minutes = ((time % 3600) // 60) %}
          {%- set minutes = '{}min'.format(minutes) if minutes > 0 else '0min' %}
          {%- set hours = ((time % 86400) // 3600) %}
          {%- set hours = '{}h '.format(hours) if hours > 0 else '0h ' %}
          {%- set days = (time // 86400) %}
          {%- set days = '{}j '.format(days) if days > 0 else '' %}
          {%- if time < 60 %}
          - de 1min 
          {%- elif time > 86400 %}
          {{ days + hours }}
          {%- else -%}
          {{ days + hours + minutes}}
          {%- endif -%}
          
      leane_duree:
        friendly_name: "leane duree"
        value_template: >-
          {%- set time = (as_timestamp(now()) - as_timestamp(states.person.leane.last_changed)) | int  %}
          {%- set minutes = ((time % 3600) // 60) %}
          {%- set minutes = '{}min'.format(minutes) if minutes > 0 else '0min' %}
          {%- set hours = ((time % 86400) // 3600) %}
          {%- set hours = '{}h '.format(hours) if hours > 0 else '0h ' %}
          {%- set days = (time // 86400) %}
          {%- set days = '{}j '.format(days) if days > 0 else '' %}
          {%- if time < 60 %}
          - de 1min 
          {%- elif time > 86400 %}
          {{ days + hours }}
          {%- else -%}
          {{ days + hours + minutes}}
          {%- endif -%}
          
      nina_duree:
        friendly_name: "nina duree"
        value_template: >-
          {%- set time = (as_timestamp(now()) - as_timestamp(states.person.nina.last_changed)) | int  %}
          {%- set minutes = ((time % 3600) // 60) %}
          {%- set minutes = '{}min'.format(minutes) if minutes > 0 else '0min' %}
          {%- set hours = ((time % 86400) // 3600) %}
          {%- set hours = '{}h '.format(hours) if hours > 0 else '0h ' %}
          {%- set days = (time // 86400) %}
          {%- set days = '{}j '.format(days) if days > 0 else '' %}
          {%- if time < 60 %}
          - de 1min 
          {%- elif time > 86400 %}
          {{ days + hours }}
          {%- else -%}
          {{ days + hours + minutes}}
          {%- endif -%}

##############################
#Sensor Date et heure 
##############################
  - platform: time_date
    display_options:
      - 'time'
      - 'date' 